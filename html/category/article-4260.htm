<!doctype html>
<html lang="zh-CN">

<head>
        <!-- Required meta tags -->
    <link rel="canonical" href="https://irelandaddress.github.io/html/category/article-4260.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/irelandaddress/favicon.ico" type="image/x-icon"/>
    <title>在Vue3项目中使用pinia代替Vuex进行数据存储 - Ireland Address</title>
        <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;700&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/fonts/irelandaddress/icomoon/style.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/fonts/irelandaddress/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/tiny-slider.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/aos.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/style.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?638cd9f716f7b41384d0241d34bf2f4c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <div class="site-mobile-menu site-navbar-target">
        <div class="site-mobile-menu-header">
            <div class="site-mobile-menu-close">
                <span class="icofont-close js-menu-toggle"></span>
            </div>
        </div>
        <div class="site-mobile-menu-body"></div>
    </div>
    <nav class="site-nav mt-3">
        <div class="container">
            <div class="site-navigation">
                                <a href="/" class="logo m-0 mt-2 float-start">Ireland Address</a>
                                <ul class="js-clone-nav d-none d-lg-inline-block text-start site-menu float-end">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
                <a href="#" class="burger ml-auto float-right site-menu-toggle js-menu-toggle d-inline-block d-lg-none" data-toggle="collapse" data-target="#main-navbar">
                    <span></span>
                </a>
            </div>
        </div>
    </nav>
    <div class="hero-section body-page">
        <div class="container">
            <div class="row justify-content-between">
                <div class="col-lg-5">
                    <h2 class="heading mb-3" data-aos="fade-up" data-aos-delay="100">文章分类</h2>
                    <p class="mb-5" data-aos="fade-up" data-aos-delay="200">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                    </p>
                </div>
                <div class="col-lg-6">
                    <div class="img-wrap" data-aos="fade-left">
                        <img src="/assets/addons/xcblog/img/irelandaddress/hero_1.png" alt="Image" class="img-fluid">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="section section-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div data-aos="fade-up">
                        <h1 class="mb-5 text-center">在Vue3项目中使用pinia代替Vuex进行数据存储</h1>
                          				  				  				<p>pinia是一个vue的状态存储库，你可以使用它来存储、共享一些跨组件或者页面的数据，使用起来和vuex非常类似。pina相对Vuex来说，更好的ts支持和代码自动补全功能。本篇随笔介绍pinia的基础用法以及持久化存储的一些用法，供参考学习。</p> <div> <div>pinia在2019年11月开始时候是一个实验项目，目的就是重新设计一个与组合API匹配的vue状态存储。基本原则和原来还是一样的，pinia同时支持vue2和vue3，且不要求你必须使用Vue3的组合API。不管是使用vue2或者vue3，pinia的API是相同的，文档是基于vue3写的。</div> <p>Pinia 是 Vuex4 的升级版，也就是 Vuex5; Pinia 极大的简化了Vuex的使用，是 Vue3的新的状态管理工具；Pinia 对 ts的支持更好，性能更优， 体积更小，无 mutations，可用于 Vue2 和 Vue3；Pinia支持Vue Devtools、 模块热更新和服务端渲染。</p> </div> <h3>1、pinia的安装和使用</h3> <p>安装pinia(https://pinia.vuejs.org/)</p> <div class="cnblogs_code"> <pre>npm install pinia</pre> </div> <p>在main.j或者main.ts中引入使用</p> <div class="cnblogs_code"> <pre>import { createPinia } from 'pinia'<span style="color: rgba(0, 0, 0, 1)">  app.use(createPinia())</span></pre> </div> <p>下面就是使用pinia的一个例子。这样你就创建了一个状态存储。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> stores/counter.js</span> import { defineStore } from 'pinia'<span style="color: rgba(0, 0, 0, 1)">  export const useCounterStore</span>= defineStore('counter'<span style="color: rgba(0, 0, 0, 1)">, {   state: ()</span>=><span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 0, 255, 1)">return</span> { count: 0<span style="color: rgba(0, 0, 0, 1)"> }   },</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 也可以这样定义状态</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> state: () => ({ count: 0 })</span><span style="color: rgba(0, 0, 0, 1)">  actions: {     increment() {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.count++<span style="color: rgba(0, 0, 0, 1)">     },   }, })</span></pre> </div> <p>在组件中使用：</p> <div class="cnblogs_code"> <pre>import { useCounterStore } from '@/stores/counter'<span style="color: rgba(0, 0, 0, 1)">  export</span><span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)"> {   setup() {     const counter</span>=<span style="color: rgba(0, 0, 0, 1)"> useCounterStore()      counter.count</span>++<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 编辑器会有代码提示</span>     counter.$patch({ count: counter.count + 1<span style="color: rgba(0, 0, 0, 1)"> })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 也可以使用action来代替</span><span style="color: rgba(0, 0, 0, 1)">    counter.increment()   }, }</span></pre> </div> <div> <div>如果你不是很喜欢setup函数和组合API，pinia也有类似vuex的map的功能。你可以用上面的方式定义你的store，但是使用时用mapStores(), mapState(),或者 mapActions():</div> <div> <div class="cnblogs_code"> <pre>const useCounterStore = defineStore('counter'<span style="color: rgba(0, 0, 0, 1)">, {   state: ()</span>=> ({ count: 0<span style="color: rgba(0, 0, 0, 1)"> }),   getters: {</span><span style="color: rgba(0, 0, 255, 1)">double</span>: (state) => state.count * 2<span style="color: rgba(0, 0, 0, 1)">,   },   actions: {     increment() {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.count++<span style="color: rgba(0, 0, 0, 1)">     }   } })  const useUserStore</span>= defineStore('user'<span style="color: rgba(0, 0, 0, 1)">, {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> ...</span><span style="color: rgba(0, 0, 0, 1)">})  export</span><span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)"> {   computed: {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 其他计算属性</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> ...</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 可以使用 this.counterStore 和 this.userStore获取</span><span style="color: rgba(0, 0, 0, 1)">    ...mapStores(useCounterStore, useUserStore)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 可以使用 this.count 和this.double获取</span>     ...mapState(useCounterStore, ['count', 'double'<span style="color: rgba(0, 0, 0, 1)">]),   },   methods: {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 可以使用 this.increment()调用</span>     ...mapActions(useCounterStore, ['increment'<span style="color: rgba(0, 0, 0, 1)">]),   }, }</span></pre> </div> <div> <div> <p>与vue4之前的版本相比，pinia的API是有很多不同的，即：</p> <ul> <li>去掉了mutation。因为好多人认为mutation是多余的。以前它方便devtools集成，现在这不是个问题了。</li> <li>不用在写复杂的ts类型包装，所有的都是有类型的，API设计的都是尽量符合ts的类型推断</li> <li>不再使用一个莫名其妙的字符串了，只需要导入一个函数，调用他们就行了，同时还有代码自动补全</li> <li>不需要动态添加store了，因为它们现在本来就是动态。如果你想，你随时可以手动去写一个store。</li> <li>没有复杂的嵌套模块了。你仍然可以在一个store中导入其他的store来实现嵌套模块，但是pinia还是推荐使用一个扁平的结构。但是即使你使用循环依赖也没关系。</li> <li>不再需要命名空间了。因为现在store本来就是扁平结构了。你也可以理解为所有的store本来就有命名空间了。</li> </ul> </div> </div> </div> <div>你的应用中的全局数据需要保存在store中。在很多地方你都要使用这些数据，比如说，用户信息需要在导航栏中显示，也需要在个人中心显示。还有些数据，需要暂存起来，比如一个需要分好几页填写的表单。</div> <div>在pinia中，store是通过defineStore()方法定义的，它的第一个参数就是一个唯一的名字：</div> <div> <div class="cnblogs_code"> <pre>import { defineStore } from 'pinia'<span style="color: rgba(0, 0, 0, 1)">  export const useStore</span>= defineStore('<span style="color: rgba(255, 0, 0, 1)">main</span>'<span style="color: rgba(0, 0, 0, 1)">, {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> other options...</span> })</pre> </div> <p>上面只是定义了store，在setup函数中调用了useStore()时，才会创建store：</p> <div class="cnblogs_code"> <pre>import { useStore } from '@/stores/counter'<span style="color: rgba(0, 0, 0, 1)">  export</span><span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)"> {   setup() {     const store</span>=<span style="color: rgba(0, 0, 0, 1)"> useStore()</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 你可以返回store这个对象，然后就可以在template中使用了</span><span style="color: rgba(0, 0, 0, 1)">      store,     }   }, }</span></pre> </div> <p>在store实例化以后，你就可以调用到store中定义的state、getters和actions了。为了让解构的值还保持响应式，你需要用到storeToRefs()方法。它会给响应式的数据创建ref。</p> <div class="cnblogs_code"> <pre>import { storeToRefs } from 'pinia'<span style="color: rgba(0, 0, 0, 1)">  export</span><span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)"> defineComponent({   setup() {     const store</span>=<span style="color: rgba(0, 0, 0, 1)"> useStore()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> `name` 和 `doubleCount` 是响应式的</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 插件增加的属性也会创建ref</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 但是会自动跳过action或者不是响应性的属性</span>     const { name, doubleCount } =<span style="color: rgba(0, 0, 0, 1)"> storeToRefs(store)</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> {       name,       doubleCount     }   }, })</span></pre> </div> <p>默认情况下，你可以在store实例上直接获取或者修改state：</p> <div class="cnblogs_code"> <pre>const store =<span style="color: rgba(0, 0, 0, 1)"> useStore() store.counter</span>++</pre> </div> <p>也可以调用$reset()方法来把state恢复为初始值：</p> <div class="cnblogs_code"> <pre>const store =<span style="color: rgba(0, 0, 0, 1)"> useStore() store.$reset()</span></pre> </div> <p>除了直接修改store里的值store.counter++，你也可以是用$patch方法。你可以同时修改多个值：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1)">store.$patch({   counter: store.counter</span>+ 1<span style="color: rgba(0, 0, 0, 1)">,   name:</span>'Abalam'<span style="color: rgba(0, 0, 0, 1)">, })</span></pre> </div> <p>或者$patch接收一个函数作为参数，来简化改变数组的写法：</p> <div class="cnblogs_code"> <pre>store.$patch((state) =><span style="color: rgba(0, 0, 0, 1)"> {   state.items.push({ name:</span>'shoes', quantity: 1<span style="color: rgba(0, 0, 0, 1)"> })   state.hasChanged</span>=<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)"> })</span></pre> </div> </div> <h3>2、pinia的持久化存储处理</h3> <div>你可以用$subscribe()来侦听state的改变，持久化一般存储在<strong>localStorage和sessionStorage。</strong></div> <div><strong><strong><br /></strong></strong></p> <p><strong>localStorage和sessionStorage差别</strong></p> <p>localStorage和sessionStorage一样都是用来存储客户端临时信息的对象。</p> <p>他们均只能存储字符串类型的对象（虽然规范中可以存储其他原生类型的对象，但是目前为止没有浏览器对其进行实现）。</p> <p>localStorage生命周期是永久，这意味着除非用户显示在浏览器提供的UI上清除localStorage信息，否则这些信息将永远存在。</p> <p>sessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。</p> <p>不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。</p> <p>JSON对象提供的parse和stringify将其他数据类型转化成字符串，再存储到storage中就可以了，操作的方式：</p> <p><strong>存：</strong></p> <p>var obj = {"name":"xiaoming","age":"16"}</p> <p>localStorage.setItem("userInfo",JSON.stringify(obj));</p> <p><strong>取：</strong></p> <p>var user = JSON.parse(localStorage.getItem("userInfo"))</p> <p><strong>删除：</strong></p> <p>localStorage.remove("userInfo);</p> <p><strong>清空：</strong></p> <p>localStorage.clear();</p> <p>pnia 使用订阅机制subscribe来实现数据的持久化存储的代码如下所示。</p> </div> <div> <div class="cnblogs_code"> <pre>const instance =<span style="color: rgba(0, 0, 0, 1)"> useMainStore();</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 订阅数据变化，变化时存储 instance.$id 这是storeId</span> instance.$subscribe((mutation, state) =><span style="color: rgba(0, 0, 0, 1)"> {   localStorage.setItem(instance.$id, JSON.stringify(state)); });</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">init 初始的时候获取</span> const val =<span style="color: rgba(0, 0, 0, 1)"> localStorage.getItem(instance.$id);</span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (val) {   instance.$state</span>=<span style="color: rgba(0, 0, 0, 1)"> JSON.parse(val); }</span></pre> </div> <p>也可以通过watch实现</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1)">watch(   pinia.state,   (state)</span>=><span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> persist the whole state to the local storage whenever it changes</span>     localStorage.setItem('piniaState'<span style="color: rgba(0, 0, 0, 1)">, JSON.stringify(state))   },   { deep:</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)"> } )</span></pre> </div> <p>但是需要注意，这种方式持久化会提示pinia未安装挂载，所以需要在pinia挂载后再调用，这里可以将它封装成方法导出，在挂载后调用</p> <div class="cnblogs_code"> <pre>xport const initStore = () =><span style="color: rgba(0, 0, 0, 1)"> {   const instance</span>=<span style="color: rgba(0, 0, 0, 1)"> useMainStore();</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 订阅数据变化，变化时存储 instance.$id 这是storeId</span>   instance.$subscribe((mutation, state) =><span style="color: rgba(0, 0, 0, 1)"> {     localStorage.setItem(instance.$id, JSON.stringify(state));   });</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">init 初始的时候获取</span>   const val =<span style="color: rgba(0, 0, 0, 1)"> localStorage.getItem(instance.$id);</span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (val) {     instance.$state</span>=<span style="color: rgba(0, 0, 0, 1)"> JSON.parse(val);   }  }</span></pre> </div> <div> <div>默认情况下，state侦听会和组件绑定在一起（如果store是在组件的setup中）。这意味着，当组件卸载时，侦听会自动被移除。如果你需要在组件被卸载时，侦听仍然保持，需要给$subscribe()方法传递第二个参数true：</div> <div class="cnblogs_code"> <pre>export<span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)"> {   setup() {     const someStore</span>=<span style="color: rgba(0, 0, 0, 1)"> useSomeStore()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 组件卸载后，侦听也会有</span>     someStore.$subscribe(callback,<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> ...</span><span style="color: rgba(0, 0, 0, 1)">  }, }</span></pre> </div> <p>或者watch状态的变化</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1)">watch(   pinia.state,   (state)</span>=><span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 在state改变时，保存在localStorage中</span>     localStorage.setItem('piniaState'<span style="color: rgba(0, 0, 0, 1)">, JSON.stringify(state))   },   { deep:</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)"> } )</span></pre> </div> <h3>3、使用pinia插件持久化存储</h3> <p>pinia plugin persist官方网站：pinia-plugin-persist</p> </div> <p>持久化存储也可以通过安装插件的方式，安装 pinia-plugin-persist 来实现。</p> <div class="cnblogs_code"> <pre>npm i<span style="color: rgba(255, 0, 0, 1)">pinia-plugin-persist</span> --save</pre> </div> <p>使用main.js</p> <div class="cnblogs_code"> <pre>import { createPinia } from 'pinia'<span style="color: rgba(0, 0, 0, 1)"> import piniaPluginPersist from</span>'pinia-plugin-persist'<span style="color: rgba(0, 0, 0, 1)"> const store</span>=<span style="color: rgba(0, 0, 0, 1)"> createPinia() store.use(piniaPluginPersist) createApp(App).use(store).mount(</span>'#app')</pre> </div> <p>在对应的store中开启，数据默认存在 sessionStorage 里，并且会以 storeId 作为 key</p> <div class="cnblogs_code"> <pre>import { defineStore } from 'pinia'<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 'main' 是storeId</span> export const useMainStore = defineStore('main'<span style="color: rgba(0, 0, 0, 1)">, {   state: ()</span>=><span style="color: rgba(0, 0, 0, 1)"> ({     counter:</span>2<span style="color: rgba(0, 0, 0, 1)">,     name:</span>'Eduardo'<span style="color: rgba(0, 0, 0, 1)">,     isAdmin:</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">   }),</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> ……</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 开启数据缓存</span><span style="color: rgba(0, 0, 0, 1)">  persist: {     enabled:</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">   } })</span></pre> </div> <p>如果需要自定义key和存储位置，则修改参数即可。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1)">  persist: {     enabled:</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,     strategies: [</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">使用插件自定义存储</span><span style="color: rgba(0, 0, 0, 1)">      {         key:</span>'settings',<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> key可以自己定义，不填的话默认就是这个store的ID</span><span style="color: rgba(0, 0, 0, 1)">        storage: localStorage,        }     ]   },</span></pre> </div> <h3>&nbsp;4、在实际项目中使用pinia</h3> <p>一般项目开发，实际上存储的内容会比较多，可能根据不同的键值模块进行区分，因此把它们放在一个store/modules里面，方便的使用引用它来存取设置数据即可。</p> <p>我们这里简单以一个settings的配置信息进行介绍，其中index.ts是一个统一的创建pinia的对象并挂接到全局App上的。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/e76d024e48ddf23ec8d58d248ee3d458.jpg" alt="在Vue3项目中使用pinia代替Vuex进行数据存储"></p> <p>其中index.ts的代码如下所示。</p> <div class="cnblogs_code"> <pre>import type { App } from "vue"<span style="color: rgba(0, 0, 0, 1)">; import { createPinia } from</span>"pinia"<span style="color: rgba(0, 0, 0, 1)">; import piniaPluginPersist from</span>'pinia-plugin-persist';<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">使用插件持久化</span><span style="color: rgba(0, 0, 0, 1)"> const store</span>=<span style="color: rgba(0, 0, 0, 1)"> createPinia(); store.use(piniaPluginPersist)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">使用插件持久化</span><span style="color: rgba(0, 0, 0, 1)"> export</span><span style="color: rgba(0, 0, 255, 1)">function</span> setupStore(app: App<Element><span style="color: rgba(0, 0, 0, 1)">) {   app.use(store); }  export { store };</span></pre> </div> <p>因此在main.js里面引入并挂接pinia即可。</p> <div class="cnblogs_code"> <pre>import { createApp } from 'vue'<span style="color: rgba(0, 0, 0, 1)">  import ElementPlus from</span>'element-plus'<span style="color: rgba(0, 0, 0, 1)"> import</span>'element-plus/dist/index.css'<span style="color: rgba(0, 0, 0, 1)"> import</span>'normalize.css'<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> css初始化</span><span style="color: rgba(0, 0, 0, 1)"> import App from</span>'./App.vue'<span style="color: rgba(255, 0, 0, 1)"><strong> import { setupStore } from "/@/store"</strong></span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><strong>;</strong></span>  const app</span>=<span style="color: rgba(0, 0, 0, 1)"> createApp(App)<strong><span style="color: rgba(255, 0, 0, 1)">setupStore(app)</span></strong> app.use(ElementPlus) app.mount(</span>'#app')</pre> </div> <p>这样我们就可以再次定义一个模块化的配置信息，以便于管理存储各种不同类型的内容。</p> <p>如下面我们定义一个程序配置信息setttings.ts</p> <div class="cnblogs_code"> <pre>import { defineStore } from "pinia"<span style="color: rgba(0, 0, 0, 1)">; import { store } from</span>"/@/store"<span style="color: rgba(0, 0, 0, 1)">;  export type<span style="color: rgba(255, 0, 0, 1)">settingType</span></span>=<span style="color: rgba(0, 0, 0, 1)"> {     title: string;     fixedHeader:</span><span style="color: rgba(0, 0, 255, 1)">boolean</span><span style="color: rgba(0, 0, 0, 1)">;     hiddenSideBar:</span><span style="color: rgba(0, 0, 255, 1)">boolean</span><span style="color: rgba(0, 0, 0, 1)">;   };  export const useSettingStore</span>=<span style="color: rgba(0, 0, 0, 1)"> defineStore({   id:</span>"settings"<span style="color: rgba(0, 0, 0, 1)">,   state: ():<span style="color: rgba(255, 0, 0, 1)">settingType</span></span>=><span style="color: rgba(0, 0, 0, 1)"> ({     title:</span>"Vue3 + TypeScript + Element"<span style="color: rgba(0, 0, 0, 1)">,     fixedHeader:</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,     hiddenSideBar:</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">   }),<span style="color: rgba(255, 0, 0, 1)">persist</span>: {     enabled:</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,     strategies: [</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">使用插件自定义存储</span><span style="color: rgba(0, 0, 0, 1)">      {         key:</span>'settings',<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> key可以自己定义，不填的话默认就是这个store的ID</span><span style="color: rgba(0, 0, 0, 1)">        storage: localStorage,        }     ]   },    getters: {     getTitle() {</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.title;     },     getFixedHeader() {</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.fixedHeader;     },     getHiddenSideBar() {</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.HiddenSideBar;     }   },   actions: {     CHANGE_SETTING({ key, value }) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> eslint-disable-next-line no-prototype-builtins</span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.hasOwnProperty(key)) {</span><span style="color: rgba(0, 0, 255, 1)">this</span>[key] =<span style="color: rgba(0, 0, 0, 1)"> value;       }     },     changeSetting(data) {</span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.CHANGE_SETTING(data);     }   } });  export</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> useSettingStoreHook() {</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> useSettingStore(store); }</span></pre> </div> <p>然后在组件视图vue或者app.vue中使用即可</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)"><</span><span style="color: rgba(128, 0, 0, 1)">script</span><span style="color: rgba(255, 0, 0, 1)">lang</span><span style="color: rgba(0, 0, 255, 1)">="ts"</span><span style="color: rgba(0, 0, 255, 1)">></span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> import { defineComponent } from</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">vue</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;  import {<span style="color: rgba(255, 0, 0, 1)">useSettingStoreHook</span> } from</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">/@/store/modules/settings</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">; import {<span style="color: rgba(255, 0, 0, 1)">storeToRefs</span> } from</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">pinia</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;  export</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">default</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> defineComponent({   name:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">app</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">,   components: {   },   setup() {     const store</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"> useSettingStoreHook</span>();      const { fixedHeader, title }</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"> storeToRefs</span>(store);</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">return</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> {<span style="color: rgba(255, 0, 0, 1)">fixedHeader</span>,<span style="color: rgba(255, 0, 0, 1)">title</span>,     };   },   methods: {     setTitle() {</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">this</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">.title</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">Vue3 + TypeScript + Element + Edit</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;       console.log(</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">this</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">.title);     },   }, });</span><span style="color: rgba(0, 0, 255, 1)"></</span><span style="color: rgba(128, 0, 0, 1)">script</span><span style="color: rgba(0, 0, 255, 1)">></span></pre> </div> <p>查看数据修改后，存储在本地存储空间中的内容，如下所示。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b0d3df9ccf7e21054fd549b0884d8db5.jpg" alt="在Vue3项目中使用pinia代替Vuex进行数据存储"></p> </div> </div> 			                    </div>

                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-4259.htm">Spring boot将图片转成base64,使用sun.misc.BASE64Decoder转换图片</a></p>
                                                <p>下一个：<a href="/html/category/article-4261.htm">通过cdn引入vant，van-swipe-cell没有效果</a></p>
                                            </div>

                    
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-8391.htm" title="动物防疫补助资金管理办法（动物防疫补助资金管理办法细则）">动物防疫补助资金管理办法（动物防疫补助资金管理办法细则）</a></li>
                        <li class="py-2"><a href="/html/category/article-8207.htm" title="动物医院名字有创意两个字的叫什么来着（动物医院牌匾）">动物医院名字有创意两个字的叫什么来着（动物医院牌匾）</a></li>
                        <li class="py-2"><a href="/html/category/article-8023.htm" title="动物诊疗许可证在哪办手续啊（动物诊疗许可证在哪办手续啊多少钱）">动物诊疗许可证在哪办手续啊（动物诊疗许可证在哪办手续啊多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-8068.htm" title="农大动物医院电话24小时营业吗北京 农大动物医院电话24小时营业吗北京市">农大动物医院电话24小时营业吗北京 农大动物医院电话24小时营业吗北京市</a></li>
                        <li class="py-2"><a href="/html/category/article-7562.htm" title="有没有收狗的平台（哪有收狗的电话）">有没有收狗的平台（哪有收狗的电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-8160.htm" title="养猫的人容易得15种病怎么预防传染（养猫的人容易得15种病怎么预防传染病）">养猫的人容易得15种病怎么预防传染（养猫的人容易得15种病怎么预防传染病）</a></li>
                        <li class="py-2"><a href="/html/category/article-7654.htm" title="宠物品牌设计（宠物品牌设计的基本要求）">宠物品牌设计（宠物品牌设计的基本要求）</a></li>
                        <li class="py-2"><a href="/html/category/article-8069.htm" title="被家猫抓出一点血（被家猫抓出一点血怎么办）">被家猫抓出一点血（被家猫抓出一点血怎么办）</a></li>
                        <li class="py-2"><a href="/html/category/article-7930.htm" title="河北农大动物医院简介图片（河北农大动物医院怎么样）">河北农大动物医院简介图片（河北农大动物医院怎么样）</a></li>
                        <li class="py-2"><a href="/html/category/article-7609.htm" title="学宠物美容技术怎么样啊（学宠物美容技术难吗）">学宠物美容技术怎么样啊（学宠物美容技术难吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
        <div class="site-footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <p>
                        Ireland Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/tiny-slider.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/aos.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/navbar.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/counter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/custom.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
<!doctype html>
<html lang="zh-CN">

<head>
        <!-- Required meta tags -->
    <link rel="canonical" href="https://irelandaddress.github.io/html/category/article-4214.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/irelandaddress/favicon.ico" type="image/x-icon"/>
    <title>JAVA多线程之同步容器&amp;并发容器 - Ireland Address</title>
        <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;700&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/fonts/irelandaddress/icomoon/style.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/fonts/irelandaddress/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/tiny-slider.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/aos.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/style.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?638cd9f716f7b41384d0241d34bf2f4c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <div class="site-mobile-menu site-navbar-target">
        <div class="site-mobile-menu-header">
            <div class="site-mobile-menu-close">
                <span class="icofont-close js-menu-toggle"></span>
            </div>
        </div>
        <div class="site-mobile-menu-body"></div>
    </div>
    <nav class="site-nav mt-3">
        <div class="container">
            <div class="site-navigation">
                                <a href="/" class="logo m-0 mt-2 float-start">Ireland Address</a>
                                <ul class="js-clone-nav d-none d-lg-inline-block text-start site-menu float-end">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
                <a href="#" class="burger ml-auto float-right site-menu-toggle js-menu-toggle d-inline-block d-lg-none" data-toggle="collapse" data-target="#main-navbar">
                    <span></span>
                </a>
            </div>
        </div>
    </nav>
    <div class="hero-section body-page">
        <div class="container">
            <div class="row justify-content-between">
                <div class="col-lg-5">
                    <h2 class="heading mb-3" data-aos="fade-up" data-aos-delay="100">文章分类</h2>
                    <p class="mb-5" data-aos="fade-up" data-aos-delay="200">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                    </p>
                </div>
                <div class="col-lg-6">
                    <div class="img-wrap" data-aos="fade-left">
                        <img src="/assets/addons/xcblog/img/irelandaddress/hero_1.png" alt="Image" class="img-fluid">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="section section-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div data-aos="fade-up">
                        <h1 class="mb-5 text-center">JAVA多线程之同步容器&amp;并发容器</h1>
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h1>同步容器</h1> <p>在java早期，提供了Vector和HashTable两个同步容器，分别是List和Map的具体实现。<br /> 查看其源码，实现线程同步的方法是对每个公共使用synchronize关键字，在方法上实现同步。源码如下：</p> <pre><code class="prism language-java"><span class="token comment">//vector.add(e)</span><span class="token keyword">public</span><span class="token keyword">synchronized</span><span class="token keyword">boolean</span><span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>elementCount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         elementData<span class="token punctuation">[</span>elementCount<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <pre><code class="prism language-java"><span class="token comment">//hashTable.get(key)</span><span class="token keyword">public</span><span class="token keyword">synchronized</span> V<span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         Entry<span class="token operator"><</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> tab<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token keyword">int</span> hash<span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token punctuation">(</span>hash<span class="token operator">&</span><span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span><span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Entry<span class="token operator"><</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> e<span class="token operator">=</span> tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> e<span class="token operator">!=</span> null<span class="token punctuation">;</span> e<span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token operator">==</span> hash<span class="token punctuation">)</span><span class="token operator">&&</span> e<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">(</span>V<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>通过源代码可看出，这两个同步容器的实现非常简单，仅仅只是在执行方法上加上同步，那么其实这样做会产生一些问题。一是在一些符合操作的时候，并不是线程安全，例如如下代码：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> index<span class="token operator">=</span>vector<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         vector<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>在上段代码中，vector.size()和vector.add(e)都是同步方法，但是在执行m1()方法时，仍然会线程不安全，解决方法任然是在m1方法上加上同步，如下：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">synchronized</span><span class="token keyword">void</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> index<span class="token operator">=</span>vector<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         vector<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>二是这种在公共方法加synchronized的方法，使得每个线程一个一个进入临界区，其实也就是相当于对普通的list或者map手动加synchronized或者lock，线程串行运行，降低并发性，效率低下。</p> <hr color="#000000" size="1""/> <h1>并发容器</h1> <p>上面说同步容器存在两个问题，那么使用并发容器可以有效地提高并发性。<br /> 并发容器跟同步容器比具有以下特点：</p> <ol> <li>有针对使用情境的设计，减少锁的使用。比如CopyOnWrite…，读并不加锁，写时复制。</li> <li>定义一些线程安全的符合操作。</li> <li>在迭代时，可以不加synchronized。但是会产生数据脏读。</li> </ol> <p>并发容器是juc包中提供的一系列容器类，里面包括了BlockingQueue（BlockingDeque是双向队列，姑且算是一类）和ConcurrentMap两个接口及其实现类，和一些CopyOnWriteXxx与ConcurrentXxx类</p> <p><strong>BlockingQueue</strong><br /> BlockingQueue主要有ArrayBlockingQueue，LinkedBlocking，SynchronousQueue三种实现<br /> 以ArrayBlockingQueue为例，看下具体使用和实现<br /> 使用示例：</p> <pre><code class="prism language-java"><span class="token comment">/**  * 阻塞队列  * 示例：生产消费问题  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">T08_BlockingQueue</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         BlockingQueue<span class="token generics function"><span class="token punctuation"><</span>Object<span class="token punctuation">></span></span> queue<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ArrayBlockingQueue</span><span class="token operator"><</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Produce p<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Produce</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>         Custom c<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Custom</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span><span class="token class-name">Thread</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span><span class="token class-name">Thread</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span><span class="token class-name">Produce</span><span class="token keyword">implements</span><span class="token class-name">Runnable</span><span class="token punctuation">{<!-- --></span>      BlockingQueue<span class="token generics function"><span class="token punctuation"><</span>Object<span class="token punctuation">></span></span> queue<span class="token punctuation">;</span><span class="token function">Produce</span><span class="token punctuation">(</span>BlockingQueue<span class="token generics function"><span class="token punctuation"><</span>Object<span class="token punctuation">></span></span> queue<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token operator">=</span>queue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>     Object<span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span><span class="token class-name">Custom</span><span class="token keyword">implements</span><span class="token class-name">Runnable</span><span class="token punctuation">{<!-- --></span>     BlockingQueue<span class="token generics function"><span class="token punctuation"><</span>Object<span class="token punctuation">></span></span> queue<span class="token punctuation">;</span><span class="token function">Custom</span><span class="token punctuation">(</span>BlockingQueue<span class="token generics function"><span class="token punctuation"><</span>Object<span class="token punctuation">></span></span> queue<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token operator">=</span>queue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>上述代码实现了生产者和消费者模式，使用了put(e)和take()方法。查看源码，put和take方法源码如下：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{<!-- --></span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> ReentrantLock lock<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>         lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                 notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{<!-- --></span>             lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> E<span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{<!-- --></span><span class="token keyword">final</span> ReentrantLock lock<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>         lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                 notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{<!-- --></span>             lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>put和take执行逻辑如下：</p> <ul> <li>加锁</li> <li>判断当前队列是否已空（已满），若是，则当前线程等待</li> <li>若不是，添加（移除）元素，唤醒另一个condition线程</li> <li>释放锁</li> </ul> <p>观察BlockingQueue接口，不单单有put和take方法，还有add(e),offer(e),remove(),poll()等功功能相似的方法，其具体使用区别如下：</p> <table> <thead> <tr> <th></th> <th>抛出异常</th> <th>返回特殊值</th> <th>阻塞</th> <th>超时</th> </tr> </thead> <tbody> <tr> <td>插入</td> <td>add(e)</td> <td>offer(e)</td> <td>put(e)</td> <td>offer(e,time,unit)</td> </tr> <tr> <td>移除</td> <td>remove()</td> <td>poll()</td> <td>take()</td> <td>poll(time,unit)</td> </tr> <tr> <td>获取首个元素</td> <td>element()</td> <td>peek()</td> <td>–</td> <td>–</td> </tr> </tbody> </table> <p>BlockingQueue允许多个线程对其进行读写操作，与同步容器比，极大提高并发量。</p> <hr color="#000000" size="1""/> <p><strong>CopyOnWriteXxx</strong><br /> 在juc下。CopyOnWrite写时复制容器是一种常用的并发容器，它通过多线程下读写分离来达到提高并发性能的目的。也就是说在读的时候任何时候，任何线程都可以，无需加锁，但是写的时候需要加锁，且构造一个容器的Copy，在这个备份中进行操作，完成后将容器替换为新容器即可。<br /> CopyOnWriteXxx类有两个，CopyOnWriteArrayList和CopyOnWriteListSet，以CopyOnWriteArrayList为例进行分析。<br /> add(e)和get(index)源码如下：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">final</span> ReentrantLock lock<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span><span class="token comment">//获取独占锁</span>         lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token operator">=</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//复制一份copy</span>             Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements<span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入数据</span>             newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">//更新为容器</span><span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{<!-- --></span><span class="token comment">//释放锁</span>             lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> E<span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//直接读取index位置上的数据</span><span class="token keyword">return</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>从源码可以看出，读取时（get）并没有对方法进行加锁，也就是说，任意线程都能够并发的访问数组数据，而在修改时（add），却要获得独占锁，也就是说同一时间只能有一个线程可以修改，而copy一份数组作为当前操作的对象，避免和读线程发生冲突。<br /> 从以上分析推出，CopyOnWrite要比同步容器的并发效率高很多，然而即便如此，仍然有其缺点和局限性：</p> <ul> <li>调用add时，需要开辟一段空间保存原数组备份，修改完后将指针指向当前备份数组，原数组会被GC。所以当高并发修改时，则会造成频繁的开辟空间和频繁GC,对性能有一点影响，这种情况CopyOnWrite并不适用；</li> <li>由于修改时是用的原数组的备份，则若此时有线程正在读取数据时，新的数组还没有更新，此时新修改的数据就不会被读取，因此，在对数据有较强一致性要求的情况下也不适用。</li> </ul> <hr color="#000000" size="1""/> <p><strong>ConcurrentMap</strong><br /> 在juc中，ConcurrentMap是提供线程安全性和原子性保证的Map。<br /> ConcurrentMap的实现类有两个，ConcurrentHashMap和ConcurrentSkipListMap，以ConcurrentHashMap为例进行分析，ConcurrentHashMap可以理解为HashMap的并发版本，它的底层实现仍然使用的是与HashMap一般的数组+链表+红黑树的实现数据结构，只是在操作上增加了并发控制。<br /> 与CopyOnWrite的锁机制不同，ConcurrentMap的锁的颗粒度更小，使用的是一种叫<strong>分段锁</strong>的东西。这种锁机制能够使得任意读取线程都能并发访问容器，同时且可以允许一定量的写线程并发修改容器。<br /> 所谓的分段锁，就是对容器内的数据分成若干段，对每一段数据分别进行加锁。毕竟多个线程修改的数据很有可能不在一块，当修改一块数据的时候却把所有数据锁住是不合适的。所以使用分段锁时，当多个线程分别修改不同段的数据时并不会造成冲突；<br /> 下面以put（）方法源码进行分析：</p> <pre><code class="prism language-java"><span class="token keyword">final</span> V<span class="token function">putVal</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span><span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span> null<span class="token operator">||</span> value<span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token keyword">throw</span><span class="token keyword">new</span><span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算桶的hash值，确定桶的位置</span><span class="token keyword">int</span> hash<span class="token operator">=</span><span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> binCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node<span class="token generics function"><span class="token punctuation"><</span>K<span class="token punctuation">,</span>V<span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             Node<span class="token generics function"><span class="token punctuation"><</span>K<span class="token punctuation">,</span>V<span class="token punctuation">></span></span> f<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tab<span class="token operator">==</span> null<span class="token operator">||</span><span class="token punctuation">(</span>n<span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//</span>                 tab<span class="token operator">=</span><span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token operator">=</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//若当前桶还么有元素，则cas式添加元素</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span><span class="token keyword">new</span><span class="token class-name">Node</span><span class="token generics function"><span class="token punctuation"><</span>K<span class="token punctuation">,</span>V<span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">// no lock when adding to empty bin</span><span class="token punctuation">}</span><span class="token comment">//扩容时，帮助扩容</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fh<span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token operator">==</span> MOVED<span class="token punctuation">)</span>                 tab<span class="token operator">=</span><span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>                 V oldVal<span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment">//hash冲突时锁住当前需要添加节点的头元素</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token operator">==</span> f<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>fh<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                             binCount<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node<span class="token generics function"><span class="token punctuation"><</span>K<span class="token punctuation">,</span>V<span class="token punctuation">></span></span> e<span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">++</span>binCount<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                                 K ek<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token operator">==</span> hash<span class="token operator">&&</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ek<span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token operator">==</span> key<span class="token operator">||</span><span class="token punctuation">(</span>ek<span class="token operator">!=</span> null<span class="token operator">&&</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                                     oldVal<span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                         e<span class="token punctuation">.</span>val<span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                                 Node<span class="token generics function"><span class="token punctuation"><</span>K<span class="token punctuation">,</span>V<span class="token punctuation">></span></span> pred<span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                                     pred<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Node</span><span class="token generics function"><span class="token punctuation"><</span>K<span class="token punctuation">,</span>V<span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                               value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token keyword">instanceof</span><span class="token class-name">TreeBin</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                             Node<span class="token generics function"><span class="token punctuation"><</span>K<span class="token punctuation">,</span>V<span class="token punctuation">></span></span> p<span class="token punctuation">;</span>                             binCount<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TreeBin<span class="token generics function"><span class="token punctuation"><</span>K<span class="token punctuation">,</span>V<span class="token punctuation">></span></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                            value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                                 oldVal<span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                     p<span class="token punctuation">.</span>val<span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>binCount<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>binCount<span class="token operator">>=</span> TREEIFY_THRESHOLD<span class="token punctuation">)</span><span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>oldVal<span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token keyword">return</span> oldVal<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1</span>L<span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>put的执行逻辑如下：</p> <ol> <li>计算当前key的hash值，确定桶的位置</li> <li>若此时桶为空，则使用CAS操作插入新节点</li> <li>若此时正在扩容，则协助扩容。</li> <li>在发生hash冲突时仅仅只锁住当前需要添加节点的头元素即可，其他桶节点都不需要加锁，大大减小了锁粒度。</li> <li>添加节点，并调整至合适的结构（当前若是链表且长度过长时转为红黑树）<br /> ConcurrentHashMap使用的是CAS+synchronized实现并发控制，分段锁是针对每个桶加锁，也就是说访问不同桶中的数据多个线程可以并发访问。</li> </ol> <h1>总结</h1> <p>同步容器和并发容器都是java提供的在多线程环境下使用线程安全的容器，通过各种并发控制机制，都有其使用领域和局限性，使用的时候还是需要考虑考虑。</p> </div> 			                    </div>

                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-4213.htm">vue中跨组件传参方式详解</a></p>
                                                <p>下一个：<a href="/html/category/article-4215.htm">Windows下Git下载安装详细图文教程</a></p>
                                            </div>

                    
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4290.htm" title="青岛市动物医院 青岛市动物医院电话">青岛市动物医院 青岛市动物医院电话</a></li>
                        <li class="py-2"><a href="/html/category/article-4291.htm" title="融安旅游景点哪个好玩的地方推荐(融安旅游景点哪个好玩的地方推荐一下)">融安旅游景点哪个好玩的地方推荐(融安旅游景点哪个好玩的地方推荐一下)</a></li>
                        <li class="py-2"><a href="/html/category/article-4320.htm" title="领养宠物赚钱吗的简单介绍">领养宠物赚钱吗的简单介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-4397.htm" title="济南 宠物领养 济南宠物领养">济南 宠物领养 济南宠物领养</a></li>
                        <li class="py-2"><a href="/html/category/article-4542.htm" title="猫咬伤多久能好（猫咬了之后多久多长时间***）">猫咬伤多久能好（猫咬了之后多久多长时间***）</a></li>
                        <li class="py-2"><a href="/html/category/article-4321.htm" title="女人开始养猫意味着（养猫最忌讳的一个生肖）">女人开始养猫意味着（养猫最忌讳的一个生肖）</a></li>
                        <li class="py-2"><a href="/html/category/article-4506.htm" title="宠物美容店需要办什么证才能开（宠物美容店需要办什么证才能开呢）">宠物美容店需要办什么证才能开（宠物美容店需要办什么证才能开呢）</a></li>
                        <li class="py-2"><a href="/html/category/article-5957.htm" title="那些年湖南台捧过的韩国明星有哪些？(湖南卫视捧红的歌手)">那些年湖南台捧过的韩国明星有哪些？(湖南卫视捧红的歌手)</a></li>
                        <li class="py-2"><a href="/html/category/article-4614.htm" title="领养狗狗好吗?（领养狗狗好吗现在）">领养狗狗好吗?（领养狗狗好吗现在）</a></li>
                        <li class="py-2"><a href="/html/category/article-5956.htm" title="动物医院附近（动物医院上班）">动物医院附近（动物医院上班）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
        <div class="site-footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <p>
                        Ireland Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/tiny-slider.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/aos.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/navbar.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/counter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/custom.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
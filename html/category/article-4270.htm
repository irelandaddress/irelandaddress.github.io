<!doctype html>
<html lang="zh-CN">

<head>
        <!-- Required meta tags -->
    <link rel="canonical" href="https://irelandaddress.github.io/html/category/article-4270.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/irelandaddress/favicon.ico" type="image/x-icon"/>
    <title>js promise 详解 - Ireland Address</title>
        <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;700&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/fonts/irelandaddress/icomoon/style.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/fonts/irelandaddress/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/tiny-slider.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/aos.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/style.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?638cd9f716f7b41384d0241d34bf2f4c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <div class="site-mobile-menu site-navbar-target">
        <div class="site-mobile-menu-header">
            <div class="site-mobile-menu-close">
                <span class="icofont-close js-menu-toggle"></span>
            </div>
        </div>
        <div class="site-mobile-menu-body"></div>
    </div>
    <nav class="site-nav mt-3">
        <div class="container">
            <div class="site-navigation">
                                <a href="/" class="logo m-0 mt-2 float-start">Ireland Address</a>
                                <ul class="js-clone-nav d-none d-lg-inline-block text-start site-menu float-end">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
                <a href="#" class="burger ml-auto float-right site-menu-toggle js-menu-toggle d-inline-block d-lg-none" data-toggle="collapse" data-target="#main-navbar">
                    <span></span>
                </a>
            </div>
        </div>
    </nav>
    <div class="hero-section body-page">
        <div class="container">
            <div class="row justify-content-between">
                <div class="col-lg-5">
                    <h2 class="heading mb-3" data-aos="fade-up" data-aos-delay="100">文章分类</h2>
                    <p class="mb-5" data-aos="fade-up" data-aos-delay="200">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                    </p>
                </div>
                <div class="col-lg-6">
                    <div class="img-wrap" data-aos="fade-left">
                        <img src="/assets/addons/xcblog/img/irelandaddress/hero_1.png" alt="Image" class="img-fluid">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="section section-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div data-aos="fade-up">
                        <h1 class="mb-5 text-center">js promise 详解</h1>
                          				  				  				<div id="content_views" class="htmledit_views"> <h1>没有promise之前处理异步的方式</h1> <blockquote> <p>在promise产生之前，js 处理异步的方式是使用回调函数，一个回调函数执行完成，进行下一个回调函数。这样会导致层层嵌套，代码不清晰。容易进入回调地狱</p> </blockquote> <h1>promise 简介</h1> <h2>promise的状态</h2> <blockquote> <p>promise 有三种状态&nbsp; pending(进行中)，resolved(成功)，rejected(失败)</p> <p>promise的状态是不可逆的</p> <p>pending---&gt;resolved&nbsp;</p> <p>或者</p> <p>pending---&gt;rejected</p> </blockquote> <h2>promise 的两个回调函数&nbsp; resolved&nbsp; rejected</h2> <blockquote> <p>promise 的参数是一个函数，函数里还有两个参数&nbsp; resolved&nbsp; rejected</p> <p>resolved(res) 处理成功的&nbsp;函数&nbsp; 它传递的参数 会在then方法里输出</p> <p>rejected(err) 处理失败的函数&nbsp; 它传递的参数 会在 catch方法里输出</p> </blockquote> <pre><code class="language-javascript">let p1 = new Promise((resolved, rejected) =&gt; {   let randomVal = Math.random();   if (randomVal &gt; 0.5) {     resolved(randomVal + "成功");   } else {     rejected(randomVal + "失败");   } })   .then((res) =&gt; {     console.log(res)//0.6423699367939153成功   })   .catch((err) =&gt; {     console.log(err)//0.3423699367939153失败   }); </code></pre> <h3>promise.all&nbsp; 同时执行多个promise</h3> <p>promise.all 的参数是多个promise函数，直到慢的一个promise执行完毕才返回所有的promise的结果，有一个promise函数崩溃，整个promise就崩溃，所以要慎用</p> <pre><code class="language-javascript">let p1 = new Promise((resolved, rejected) =&gt; {   let randomVal = Math.random();   if (randomVal &gt; 0.1) {     resolved(randomVal + "成功");   } else {     rejected(randomVal + "失败");   } })  let p2 = new Promise((resolved, rejected) =&gt; {   let randomVal = Math.random();   setTimeout(() =&gt; {     if (randomVal &gt; 0.9) {       resolved("成功" + randomVal);     } else {       rejected("失败" + randomVal);     }   }, 200); });  Promise.all([p1,p2]).then(resList=&gt;{     console.log(resList) }).catch(err=&gt;{     console.log("错误err"+err) }).finally(result=&gt;{     console.log("无论成功或者失败都会执行",result) })</code></pre> <h2>promise.race 多个promise 执行速度pk看谁的速度最快，返回最快的promise的结果</h2> <pre><code class="language-javascript">let p1 = new Promise((resolved, rejected) =&gt; {   let randomVal = Math.random();   if (randomVal &gt; 0.1) {     resolved(randomVal + "成功");   } else {     rejected(randomVal + "失败");   } })  let p2 = new Promise((resolved, rejected) =&gt; {   let randomVal = Math.random();   setTimeout(() =&gt; {     if (randomVal &gt; 0.9) {       resolved("成功" + randomVal);     } else {       rejected("失败" + randomVal);     }   }, 200); });  Promise.race([p1,p2]).then(resList=&gt;{     console.log(resList) }).catch(err=&gt;{     console.log("错误err"+err) }).finally(result=&gt;{     console.log("无论成功或者失败都会执行",result) })</code></pre> <h1>什么是宏任务，微任务</h1> <h3>常见的 宏任务</h3> <p>setTimeout&nbsp; setInterval</p> <h3>常见的微任务</h3> <p>Promise.then Promise.catch Promise.finally</p> <p>MutationObserver</p> <p>process.nextTIck(nodejs里的)</p> <h3>执行顺序</h3> <p>同一层的 先执行主线层然后执行微任务，最后执行 红任务</p> <h2>几道有意思的promise面试题</h2> <h3>场景1&nbsp;</h3> <blockquote> <p>promise resolved函数执行完毕之后才执行 then的方法</p> </blockquote> <pre><code class="language-javascript"> new Promise((resolved,rejected)=&gt;{     console.log("1") }).then(res=&gt;{     console.log("2")     console.log(res) }) console.log("4")</code></pre> <p><span style="color:#fe2c24;">错误解法 和错误的思路</span><br /><s><span style="color:#0d0016;">错误答案&nbsp; 1，4，2 ，1</span></s></p> <p><s><span style="color:#0d0016;">错误思路，</span></s></p> <p><s><span style="color:#0d0016;">一般人想 主线程 同步任务走完，然后走 微任务</span></s></p> <p><span style="color:#0d0016;">实际上 promise里没有走resovled函数的时候是不会走 then里的</span></p> <p><span style="color:#0d0016;">同理&nbsp; promise里没有走rejected函数的时候是不会走 catch里的</span></p> <p><span style="color:#0d0016;">所以正确的答案是</span></p> <p>1 4&nbsp;</p> <h3>场景 2&nbsp;</h3> <blockquote> <p>resovled函数外边包裹了定时器，得定时器计时结束才能 调用resolved，最后走then</p> </blockquote> <pre><code class="language-javascript">new Promise((resolved, rejected) =&gt; {     console.log("1")   setTimeout(() =&gt; {     resolved("2");   }, 20);    console.log("3"); }).then((res) =&gt; {   console.log("4");   console.log(res); }); console.log("5"); setTimeout(ele=&gt;{   console.log("6") },0)</code></pre> <p>这题直接上正确答案</p> <p>1，3，5，6，4，2&nbsp; &nbsp; &nbsp;</p> <p>答案解析</p> <p>1 promise主体函数的代码，是同步主线程的优先执行</p> <p>3 同1&nbsp;</p> <p>5 是主线程</p> <p>6 和 2 4&nbsp; res(2) 相比都是定时器里的代码（红任务），只是 6的延时时间较少，所以优先执行6</p> <p>4 2 是promise 里的resolved走完之后，执行then 里的&nbsp; 4&nbsp; &nbsp; res是 resolved("2")里返回的2,所以打印出 2</p> <h3>场景3 主线程 宏任务 微任务 综合</h3> <pre><code class="language-javascript">console.log("1"); setTimeout(function() {   console.log("2");   process.nextTick(function() {     console.log("3");   });   new Promise(function(resolve) {     console.log("4");     resolve();   }).then(function() {     console.log("5");   }); }); process.nextTick(function() {   console.log("6"); }); new Promise(function(resolve) {   console.log("7");   resolve(); }).then(function() {   console.log("8"); }); setTimeout(function() {   console.log("9");   process.nextTick(function() {     console.log("10");   });   new Promise(function(resolve) {     console.log("11");     resolve();   }).then(function() {     console.log("12");   }); });</code></pre> <p>答案</p> <p>&nbsp; 1 &nbsp;7 6 8 2 4 3 5 9 11 10 12</p> <p>1 主线程</p> <p>7 promis主体函数里的代码 主线程</p> <p>6 process.nextTick 微任务</p> <p>8&nbsp; promise resolve函数处理过走 then&nbsp;</p> <p>2&nbsp; 2345 和 9101112 分别在两个定时器里 由于两个定时器的时间是一致的，所以根据先后i顺序执行，先执行上面的，再执行下边的</p> <p>2345&nbsp; 2是主线程&nbsp;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4是主线程</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3 是微任务</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5是微任务</p> <p>9101112</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;9 是主线程</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;11 是主线程&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;10 是微任务</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 12 是微任务</p> <p>总结</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; 当主线程 红任务 微任务在一起的时候，先执行主线程，然后执行微任务，最后执行红任务</p> <h3>场景4 promise.resolve().then 和 setTimeout(()=&gt;{},0) pk</h3> <p>首先我们了解一下 promise.resolve()是什么的简写</p> <pre><code class="language-javascript">new Promise((resolve)=&gt;{     resolve() }).then(res=&gt;{     console.log("123") })</code></pre> <p>那么一下两个哪个更快呢</p> <pre><code class="language-javascript">setTimeout(ele=&gt;{     console.log("2") }) Promise.resolve().then(res=&gt;{     console.log("1") })</code></pre> <p>将 Promise.resolve().then 转换成上一个写法可以知道 1 是微任务，2 是宏任务，</p> <p>所以先走1 再走 2</p> <p>我们接下来再看一题</p> <pre><code class="language-javascript">setTimeout(ele=&gt;{     console.log("1")     Promise.resolve().then(res=&gt;{         console.log("2")     }) }) Promise.resolve().then(res=&gt;{     console.log("3")     setTimeout(ele=&gt;{         console.log("4")     }) })</code></pre> <p>先走 微任务 3&nbsp;</p> <p>然后走 上边定时器里的&nbsp;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; 走主线程 1</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; 走微任务 2</p> <p>然后走下边的 宏任务</p> <p>注意</p> <p>&nbsp; &nbsp;<span style="color:#fe2c24;"> &nbsp; &nbsp; </span><u><span style="color:#fe2c24;">当出现定时器时 按照 延迟时间和创建先后顺序 这两个条件 先后执行定时器，并且只有执行完一个定时器之后，才执行下一个定时器</span></u></p> <h3>场景5 定时器嵌套</h3> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p> <pre><code class="language-javascript">setTimeout((ele) =&gt; {   console.log(1);   setTimeout(() =&gt; {     console.log(2);   }, 40); }, 20); setTimeout((ele) =&gt; {   console.log(3); }, 30);</code></pre> <p>这一题</p> <p><s>很多人的答案时1 2 3</s></p> <p><s>他们想的是先走完第一个定时器里的再走第二个定时器里的</s></p> <p>实际上 第一个嵌套的定时器会产生叠加&nbsp;</p> <p>2&nbsp; 的执行时间时 20 + 40 也就是 60</p> <p>而 3 的时间时30 所以时 1&nbsp; 3&nbsp; 2&nbsp;</p> <p><span style="color:#fe2c24;">注意当定时器嵌套时 ，里边的执行时间是会和上边的叠加的</span></p> <p><span style="color:#0d0016;">以上是我对红任务微任务的一些理解，希望对大家能有所帮助，记得点个赞哦</span></p> </p></div> 			                    </div>

                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-4269.htm">【C语言】指针初阶</a></p>
                                                <p>下一个：<a href="/html/category/article-4271.htm">elasticsearch 之时间类型</a></p>
                                            </div>

                    
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6688.htm" title="谢楠和吴京说的冷笑话（画壁翠竹）不看后悔，">谢楠和吴京说的冷笑话（画壁翠竹）不看后悔，</a></li>
                        <li class="py-2"><a href="/html/category/article-7056.htm" title="广州有领养宠物猫的地方吗?（广州有领养宠物猫的地方吗在哪里）">广州有领养宠物猫的地方吗?（广州有领养宠物猫的地方吗在哪里）</a></li>
                        <li class="py-2"><a href="/html/category/article-7700.htm" title="义乌收养流浪宠物（义乌市流浪狗收留中心）">义乌收养流浪宠物（义乌市流浪狗收留中心）</a></li>
                        <li class="py-2"><a href="/html/category/article-7194.htm" title="宠物医院仓鼠医药费多少（宠物医院给仓鼠看病吗）">宠物医院仓鼠医药费多少（宠物医院给仓鼠看病吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7608.htm" title="豆干炒腊肉的做法大全窍门(豆干炒腊肉的做法大全)">豆干炒腊肉的做法大全窍门(豆干炒腊肉的做法大全)</a></li>
                        <li class="py-2"><a href="/html/category/article-7103.htm" title="晚礼服十大品牌排行榜有哪些牌子(晚礼服十大品牌排行榜有哪些图片)">晚礼服十大品牌排行榜有哪些牌子(晚礼服十大品牌排行榜有哪些图片)</a></li>
                        <li class="py-2"><a href="/html/category/article-7149.htm" title="兽用疫苗保存温度（兽用疫苗冰箱）">兽用疫苗保存温度（兽用疫苗冰箱）</a></li>
                        <li class="py-2"><a href="/html/category/article-6642.htm" title="动物防疫站在哪个位置啊 动物防疫站在哪个位置啊图片">动物防疫站在哪个位置啊 动物防疫站在哪个位置啊图片</a></li>
                        <li class="py-2"><a href="/html/category/article-7332.htm" title="动物疫苗对人有害处吗知乎 动物疫苗对人有害处吗知乎">动物疫苗对人有害处吗知乎 动物疫苗对人有害处吗知乎</a></li>
                        <li class="py-2"><a href="/html/category/article-6826.htm" title="被猫抓了一下轻微破皮要***吗多少钱一只（被猫抓了一下轻微破皮要***吗多少钱一只）">被猫抓了一下轻微破皮要***吗多少钱一只（被猫抓了一下轻微破皮要***吗多少钱一只）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
        <div class="site-footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <p>
                        Ireland Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/tiny-slider.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/aos.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/navbar.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/counter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/custom.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
<!doctype html>
<html lang="zh-CN">

<head>
        <!-- Required meta tags -->
    <link rel="canonical" href="https://irelandaddress.github.io/html/category/article-4177.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/irelandaddress/favicon.ico" type="image/x-icon"/>
    <title>synchronized有几种用法？ - Ireland Address</title>
        <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;700&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/fonts/irelandaddress/icomoon/style.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/fonts/irelandaddress/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/tiny-slider.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/aos.css">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/irelandaddress/style.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?638cd9f716f7b41384d0241d34bf2f4c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <div class="site-mobile-menu site-navbar-target">
        <div class="site-mobile-menu-header">
            <div class="site-mobile-menu-close">
                <span class="icofont-close js-menu-toggle"></span>
            </div>
        </div>
        <div class="site-mobile-menu-body"></div>
    </div>
    <nav class="site-nav mt-3">
        <div class="container">
            <div class="site-navigation">
                                <a href="/" class="logo m-0 mt-2 float-start">Ireland Address</a>
                                <ul class="js-clone-nav d-none d-lg-inline-block text-start site-menu float-end">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
                <a href="#" class="burger ml-auto float-right site-menu-toggle js-menu-toggle d-inline-block d-lg-none" data-toggle="collapse" data-target="#main-navbar">
                    <span></span>
                </a>
            </div>
        </div>
    </nav>
    <div class="hero-section body-page">
        <div class="container">
            <div class="row justify-content-between">
                <div class="col-lg-5">
                    <h2 class="heading mb-3" data-aos="fade-up" data-aos-delay="100">文章分类</h2>
                    <p class="mb-5" data-aos="fade-up" data-aos-delay="200">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                    </p>
                </div>
                <div class="col-lg-6">
                    <div class="img-wrap" data-aos="fade-left">
                        <img src="/assets/addons/xcblog/img/irelandaddress/hero_1.png" alt="Image" class="img-fluid">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="section section-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div data-aos="fade-up">
                        <h1 class="mb-5 text-center">synchronized有几种用法？</h1>
                          				  				  				<p>在 Java 语言中，保证线程安全性的主要手段是加锁，而 Java 中的锁主要有两种：synchronized 和 Lock，我们今天重点来看一下 synchronized 的几种用法。</p> <h2 id="用法简介">用法简介</h2> <p>使用 synchronized 无需手动执行加锁和释放锁的操作，我们只需要声明 synchronized 关键字就可以了，JVM 层面会帮我们自动的进行加锁和释放锁的操作。<br /> synchronized 可用于修饰<strong>普通方法、静态方法和代码块</strong>，接下来我们分别来看。</p> <h2 id="1修饰普通方法">1、修饰普通方法</h2> <p>synchronized 修饰普通方法的用法如下：</p> <pre><code class="language-java">/**  * synchronized 修饰普通方法  */ public synchronized void method() {     // .... }</code></pre> <p>当 synchronized 修饰普通方法时，被修饰的方法被称为同步方法，其作用范围是整个方法，作用的对象是调用这个方法的对象。</p> <h2 id="2修饰静态方法">2、修饰静态方法</h2> <p>synchronized 修饰静态方法和修饰普通方法类似，它的用法如下：</p> <pre><code class="language-java">/**  * synchronized 修饰静态方法  */ public static synchronized void staticMethod() {     // ....... }</code></pre> <p>当 synchronized 修饰静态方法时，其作用范围是整个程序，这个锁对于所有调用这个锁的对象都是互斥的。</p> <blockquote> <p>所谓的互斥，指的是同一时间只能有一个线程能使用，其他线程只能排队等待。</p> </blockquote> <h3 id="修饰普通方法-vs-修饰静态方法">修饰普通方法 VS 修饰静态方法</h3> <p>synchronized 修饰普通方法和静态方法看似相同，但二者完全不同，<strong>对于静态方法来说 synchronized 加锁是全局的，也就是整个程序运行期间，所有调用这个静态方法的对象都是互斥的，而普通方法是针对对象级别的，不同的对象对应着不同的锁</strong>，比如以下代码，同样是调用两次方法，但锁的获取完全不同，实现代码如下：</p> <pre><code class="language-java">import java.time.LocalDateTime; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit;  public class SynchronizedUsage {     public static void main(String[] args) throws InterruptedException {         // 创建线程池同时执行任务         ExecutorService threadPool = Executors.newFixedThreadPool(10);          // 执行两次静态方法         threadPool.execute(() -&gt; {             staticMethod();         });         threadPool.execute(() -&gt; {             staticMethod();         });                  // 执行两次普通方法         threadPool.execute(() -&gt; {             SynchronizedUsage usage = new SynchronizedUsage();             usage.method();         });         threadPool.execute(() -&gt; {             SynchronizedUsage usage2 = new SynchronizedUsage();             usage2.method();         });     }      /**      * synchronized 修饰普通方法      * 本方法的执行需要 3s（因为有 3s 的休眠时间）      */     public synchronized void method() {         System.out.println("普通方法执行时间：" + LocalDateTime.now());         try {             // 休眠 3s             TimeUnit.SECONDS.sleep(3);         } catch (InterruptedException e) {             e.printStackTrace();         }     }      /**      * synchronized 修饰静态方法      * 本方法的执行需要 3s（因为有 3s 的休眠时间）      */     public static synchronized void staticMethod() {         System.out.println("静态方法执行时间：" + LocalDateTime.now());         try {             // 休眠 3s             TimeUnit.SECONDS.sleep(3);         } catch (InterruptedException e) {             e.printStackTrace();         }     } }</code></pre> <p>以上程序的执行结果如下：<br /><img decoding="async" src="https://cdn.nlark.com/yuque/0/2022/png/92791/1643426201331-a9d1c594-1ad6-4366-8384-28ff1ffaed01.png#clientId=u641792d8-6acd-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=239&amp;id=ub22028cf&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=478&amp;originWidth=2001&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=96015&amp;status=done&amp;style=none&amp;taskId=u0be2eabc-b115-4203-9b64-95f9479ae39&amp;title=&amp;width=1000.5" alt="image.png"><br /> 从上述结果可以看出，<strong>静态方法加锁是全局的，针对的是所有调用者；而普通方法加锁是对象级别的，不同的对象拥有的锁也不同。</strong></p> <h2 id="3修饰代码块">3、修饰代码块</h2> <p>我们在日常开发中，最常用的是给代码块加锁，而不是给方法加锁，因为给方法加锁，相当于给整个方法全部加锁，这样的话锁的粒度就太大了，程序的执行性能就会受到影响，所以通常情况下，我们会使用 synchronized 给代码块加锁，它的实现语法如下：</p> <pre><code class="language-java">public void classMethod() throws InterruptedException {     // 前置代码...          // 加锁代码     synchronized (SynchronizedUsage.class) {         // ......     }          // 后置代码... }</code></pre> <p>从上述代码我们可以看出，相比于修饰方法，修饰代码块需要自己手动指定加锁对象，加锁的对象通常使用 this 或 xxx.class 这样的形式来表示，比如以下代码：</p> <pre><code class="language-java">// 加锁某个类 synchronized (SynchronizedUsage.class) {     // ...... }  // 加锁当前类对象 synchronized (this) {     // ...... }</code></pre> <h3 id="this-vs-class">this VS class</h3> <p>使用 synchronized 加锁 this 和 xxx.class 是完全不同的，当加锁 this 时，表示用当前的对象进行加锁，每个对象都对应了一把锁；而当使用 xxx.class 加锁时，表示使用某个类（而非类实例）来加锁，它是应用程序级别的，是全局生效的，如以下代码所示：</p> <pre><code class="language-java">import java.time.LocalDateTime; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit;  public class SynchronizedUsageBlock {     public static void main(String[] args) throws InterruptedException {         // 创建线程池同时执行任务         ExecutorService threadPool = Executors.newFixedThreadPool(10);          // 执行两次 synchronized(this)         threadPool.execute(() -&gt; {             SynchronizedUsageBlock usage = new SynchronizedUsageBlock();             usage.thisMethod();         });         threadPool.execute(() -&gt; {             SynchronizedUsageBlock usage2 = new SynchronizedUsageBlock();             usage2.thisMethod();         });          // 执行两次 synchronized(xxx.class)         threadPool.execute(() -&gt; {             SynchronizedUsageBlock usage3 = new SynchronizedUsageBlock();             usage3.classMethod();         });         threadPool.execute(() -&gt; {             SynchronizedUsageBlock usage4 = new SynchronizedUsageBlock();             usage4.classMethod();         });     }      /**      * synchronized(this) 加锁      * 本方法的执行需要 3s（因为有 3s 的休眠时间）      */     public void thisMethod() {         synchronized (this) {             System.out.println("synchronized(this) 加锁：" + LocalDateTime.now());             try {                 // 休眠 3s                 TimeUnit.SECONDS.sleep(3);             } catch (InterruptedException e) {                 e.printStackTrace();             }         }     }      /**      * synchronized(xxx.class) 加锁      * 本方法的执行需要 3s（因为有 3s 的休眠时间）      */     public void classMethod() {         synchronized (SynchronizedUsageBlock.class) {             System.out.println("synchronized(xxx.class) 加锁：" + LocalDateTime.now());             try {                 // 休眠 3s                 TimeUnit.SECONDS.sleep(3);             } catch (InterruptedException e) {                 e.printStackTrace();             }         }     } }</code></pre> <p>以上程序的执行结果如下：<br /><img decoding="async" src="https://cdn.nlark.com/yuque/0/2022/png/92791/1643427854702-67117bd9-8c40-4e68-9bce-7e1681f5f6f1.png#clientId=u641792d8-6acd-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=256&amp;id=u8c79dcac&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=511&amp;originWidth=1880&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=120107&amp;status=done&amp;style=none&amp;taskId=ua8131b2f-d24b-440c-95f1-f1170d8c5fb&amp;title=&amp;width=940" alt="image.png"></p> <h2 id="总结">总结</h2> <p>synchronized 用 3 种用法，用它可以来修饰普通方法、静态方法和代码块，其中最常用的是修饰代码块，而修饰代码块时需要指定一个加锁对象，这个加锁对象通常使用 this 或 xxx.class 来表示，当使用 this 时，表示使用当前对象来加锁，而使用 class 时，表示表示使用某个类（非类对象实例）来加锁，它是全局生效的。</p> <blockquote></blockquote> 			                    </div>

                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-4176.htm">C/C++编程：异常处理(exception handling)的原理</a></p>
                                                <p>下一个：<a href="/html/category/article-4178.htm">JRebel热部署的使用</a></p>
                                            </div>

                    
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6132.htm" title="卖动物疫苗需要什么资质 卖动物疫苗需要什么资质证书">卖动物疫苗需要什么资质 卖动物疫苗需要什么资质证书</a></li>
                        <li class="py-2"><a href="/html/category/article-7102.htm" title="加盟狗粮公司代理点电话（狗粮招商加盟）">加盟狗粮公司代理点电话（狗粮招商加盟）</a></li>
                        <li class="py-2"><a href="/html/category/article-6044.htm" title="赵英俊图片（赵英俊是光头强的原型吗）">赵英俊图片（赵英俊是光头强的原型吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7010.htm" title="动物防疫疫苗与接种疫苗区别是什么意思（动物疫苗是疫苗吗）">动物防疫疫苗与接种疫苗区别是什么意思（动物疫苗是疫苗吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7379.htm" title="在什么平台卖宠物卖的快（离我最近的狗市场）">在什么平台卖宠物卖的快（离我最近的狗市场）</a></li>
                        <li class="py-2"><a href="/html/category/article-7286.htm" title="世界卫生组织宣布阿斯巴甜可能致癌。这就是它对您的无糖汽水的意义。 :">世界卫生组织宣布阿斯巴甜可能致癌。这就是它对您的无糖汽水的意义。 :</a></li>
                        <li class="py-2"><a href="/html/category/article-7287.htm" title="瑞派宠物诊所电话（瑞派宠物医院天眼查）">瑞派宠物诊所电话（瑞派宠物医院天眼查）</a></li>
                        <li class="py-2"><a href="/html/category/article-7241.htm" title="上海领养宠物猫的地方（上海有没有领养猫咪的机构）">上海领养宠物猫的地方（上海有没有领养猫咪的机构）</a></li>
                        <li class="py-2"><a href="/html/category/article-6965.htm" title="米其林轮胎101w97w区别(米其林轮胎97w和97v)">米其林轮胎101w97w区别(米其林轮胎97w和97v)</a></li>
                        <li class="py-2"><a href="/html/category/article-4578.htm" title="日产cvt专用变速箱油(日产的cvt变速箱油需要更换吗)">日产cvt专用变速箱油(日产的cvt变速箱油需要更换吗)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">14</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
        <div class="site-footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <p>
                        Ireland Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/tiny-slider.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/aos.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/navbar.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/counter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/irelandaddress/custom.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
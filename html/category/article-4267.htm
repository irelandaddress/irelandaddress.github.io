<!doctype html>
<html lang="zh-CN">

<head>
        <!-- Required meta tags -->
    <link rel="canonical" href="https://irelandaddress.github.io/html/category/article-4267.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/website/img/irelandaddress/favicon.ico" type="image/x-icon"/>
    <title>Java-NIO之Buffer（缓冲区） - Ireland Address</title>
        <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;700&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/fonts/irelandaddress/icomoon/style.css">
    <link rel="stylesheet" href="/assets/website/fonts/irelandaddress/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/irelandaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/irelandaddress/tiny-slider.css">
    <link rel="stylesheet" href="/assets/website/css/irelandaddress/aos.css">
    <link rel="stylesheet" href="/assets/website/css/irelandaddress/style.css">
    <link rel="stylesheet" href="/assets/website/css/style.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?638cd9f716f7b41384d0241d34bf2f4c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <div class="site-mobile-menu site-navbar-target">
        <div class="site-mobile-menu-header">
            <div class="site-mobile-menu-close">
                <span class="icofont-close js-menu-toggle"></span>
            </div>
        </div>
        <div class="site-mobile-menu-body"></div>
    </div>
    <nav class="site-nav mt-3">
        <div class="container">
            <div class="site-navigation">
                                <a href="/" class="logo m-0 mt-2 float-start">Ireland Address</a>
                                <ul class="js-clone-nav d-none d-lg-inline-block text-start site-menu float-end">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
                <a href="#" class="burger ml-auto float-right site-menu-toggle js-menu-toggle d-inline-block d-lg-none" data-toggle="collapse" data-target="#main-navbar">
                    <span></span>
                </a>
            </div>
        </div>
    </nav>
    <div class="hero-section body-page">
        <div class="container">
            <div class="row justify-content-between">
                <div class="col-lg-5">
                    <h2 class="heading mb-3" data-aos="fade-up" data-aos-delay="100">文章分类</h2>
                    <p class="mb-5" data-aos="fade-up" data-aos-delay="200">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                    </p>
                </div>
                <div class="col-lg-6">
                    <div class="img-wrap" data-aos="fade-left">
                        <img src="/assets/website/img/irelandaddress/hero_1.png" alt="Image" class="img-fluid">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="section section-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div data-aos="fade-up">
                        <h1 class="mb-5 text-center">Java-NIO之Buffer（缓冲区）</h1>
                          				  				  				<h1 id="1buffer-是什么">1：Buffer 是什么</h1> <p>Buffer（缓冲区）本质上是一个由基本类型数组构成的容器。</p> <p><strong>我们先看看Buffer类的基本构成：</strong></p> <pre><code class="language-java">public abstract class Buffer {     // Invariants: mark <= position <= limit <= capacity     private int mark = -1;     private int position = 0;     private int limit;     private int capacity; }</code></pre> <p><strong>再看看子类ByteBuffer 的构成：</strong></p> <pre><code class="language-java">public abstract class ByteBuffer extends Buffer implements Comparable<ByteBuffer>{     // These fields are declared here rather than in Heap-X-Buffer in order to     // reduce the number of virtual method invocations needed to access these     // values, which is especially costly when coding small buffers.     //     final byte[] hb;                  // Non-null only for heap buffers     final int offset;     boolean isReadOnly; }</code></pre> <hr/> <p>因此一个ByteBuffer 对象由基本的五大属性组成：<br /><b><font color="red" size="4">核心属性：</font></b><br /> ● mark  初始值为-1，用以标记当前position的位置。对应方法为 mark()。<br /> ● position 初始值为0，读、写数据的起点位置。对应方法为 position()。<br /> ● limit  界限，和position 组成可读、可写的数据操作区间。对应方法为 limit()。<br /> ● capacity 缓冲区的大小。对应方法为capacity()。</p> <p><b><font color="red" size="4">数据存储：</font></b><br /> ● hb 一个基本类型构成的数据，大小等于capacity。</p> <h1 id="2buffer-如何使用">2：Buffer 如何使用</h1> <p><b><font color="red" size="4">核心方法：</font></b><br /> ● put()  写数据。<br /> ● get() 读数据。<br /> ● flip() 翻转。如当 put 完数据之后，调用flip s 是为了告知下次 get 数据需要读取数据区间。反过来也是一样的道理。</p> <pre><code class="language-java">    public final Buffer flip() {         limit = position;         position = 0;         mark = -1;         return this;     }</code></pre> <p>● clear() 清空。不会清除数据，但会各个属性回归初始值。</p> <pre><code class="language-java">    public final Buffer clear() {         position = 0;         limit = capacity;         mark = -1;         return this;     }</code></pre> <p>● rewind 倒带。当需要重读、重写的时候可以使用。</p> <pre><code class="language-java">    public final Buffer rewind() {         position = 0;         mark = -1;         return this;     }</code></pre> <p>● remaning() 返回剩余未被处理的数量。</p> <pre><code class="language-java">    public final int remaining() {         return limit - position;     }</code></pre> <p>假设我们声明了一个 capacity 为 5 的字节缓冲区：<br /><code>ByteBuffer buf = ByteBuffer.allocate(4);</code><br /> 那么，缓冲区的初始状态就是如下图所示：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/328e22af8d04db4fe428d97f16efd801.jpg" alt="Java-NIO之Buffer（缓冲区）"></p> <h1 id="3buffer-用来干什么">3：Buffer 用来干什么</h1> <p><u><b>Buffer（缓冲区）>Buffer（缓冲区） 常常用来于NIO的Channel进行交互。数据从缓冲区进行存放和读取。</b></u></p> <hr/> <h2 id="31buffer-读文件">3.1：Buffer 读文件</h2> <p>这里对比了两种读文件的方式。</p> <hr/> <p><b><font color="red" size="4">BIO读文件（不用Buffer）：</font></b></p> <pre><code class="language-java">    public void ioRead() {         FileInputStream fileInputStream = null;         try {             fileInputStream = new FileInputStream(new File("src/test/java/com/loper/mine/SQLParserTest.java"));             byte[] receive = new byte[8];             // IO 流读文件的时候不会管 byte 中的数据是否已被处理过，下一次读取直接覆盖             while (fileInputStream.read(receive) > 0) {                 System.out.println(new String(receive));             }         } catch (Exception e) {             e.printStackTrace();         } finally {             try {                 if (fileInputStream != null)                     fileInputStream.close();             } catch (IOException e) {                 e.printStackTrace();             }         }     }</code></pre> <hr/> <p><b><font color="red" size="4">BufferReader读文件（用Buffer）：</font></b></p> <pre><code class="language-java">    public void bufferRead() {         int capacity = 8;         FileInputStream fileInputStream = null;         InputStreamReader inputStreamReader = null;         BufferedReader bufferedReader = null;         try {             fileInputStream = new FileInputStream(new File("src/test/java/com/loper/mine/SQLParserTest.java"));             inputStreamReader = new InputStreamReader(fileInputStream);             bufferedReader = new BufferedReader(inputStreamReader, capacity);              CharBuffer receive = CharBuffer.allocate(capacity);             char[] data = new char[capacity];             // buffer reader 在读取数据的时候会判断buffer 中的数据是否已被清理             while (bufferedReader.read(receive) > 0) {                 receive.flip();                 receive.get(data);                 receive.flip();                 System.out.println(new String(data));             }         } catch (Exception e) {             e.printStackTrace();         } finally {             try {                 if (bufferedReader != null)                     bufferedReader.close();                 if (inputStreamReader != null)                     inputStreamReader.close();                 if (fileInputStream != null)                     fileInputStream.close();             } catch (IOException e) {                 e.printStackTrace();             }         }     }</code></pre> <p>可以看到，当我们使用BIO时，从文件流中读取的数据使用 byte数组接收就可以了。<br /> 而使用 BufferReader之后，读取文件返回的是一个 ByteBuffer，<u><font color="red" size="5">那为什么要这么做呢？</font></u><br /> 1：使用byte[] 接收数据，我们读取之后下次再进行写入的时候是不知道是否已经读取完毕了的。下次的写入会将原本的数据直接覆盖掉。<br /> 2：使用ByteBuffer 接收文件流中的数据，在下一次数据写入前不进行 flip 或 clear 操作，那么下次写入数据时并不会更新 ByteBuffer 中的数据。</p> <hr/> <p><b><font color="red">试想多线程情况下，一个线程写数据，另一个线程读数据，若数据还在未确保读完的情况下就进行下一步写入了，那么势必会丢失数据。<br /> 而使用Buffer 则很好的避免了这种情况，无论是写还是读，都需要告诉下一次读或写数据时的操作区间。byte[] 本身则是不支持这种情况的。<br /></font></b></p> <hr/> <h2 id="32buffer-与多线程">3.2：Buffer 与多线程</h2> <p>多线程下模拟数据分段读、写：</p> <pre><code class="language-java">    public static void main(String[] args) {         ThreadPoolExecutor executor = new ThreadPoolExecutor(2, 2, 1L, TimeUnit.SECONDS, new ArrayBlockingQueue<>(10));          String bufferData = "hello world";         int capacity = 4;         // 默认使用分配堆内存分配缓冲区空间（非直接缓冲区）         //ByteBuffer buffer = ByteBuffer.allocate(capacity);         // 使用直接内存分配缓冲区空间（直接缓冲区）         ByteBuffer buffer = ByteBuffer.allocateDirect(capacity);          Semaphore semaphore1 = new Semaphore(0);         Semaphore semaphore2 = new Semaphore(0);         // 写操作         executor.execute(() -> {             int index = 0, len = bufferData.length();             while (index < len) {                 try {                     System.out.println("put数据开始----------------");                     print(buffer);                     int endIndex = index + capacity;                     if (endIndex > len)                         endIndex = len;                      // 存之前先清空buffer                     buffer.clear();                     buffer.put(bufferData.substring(index, endIndex).getBytes());                      System.out.println("put数据结束----------------");                     print(buffer);                     System.out.println("\n");                     // 存完告诉读线程可读区域大小                     buffer.flip();                      index += capacity;                 } catch (Exception e) {                     e.printStackTrace();                     break;                 } finally {                     semaphore2.release();                     try {                         semaphore1.tryAcquire(3, TimeUnit.SECONDS);                     } catch (InterruptedException e) {                         e.printStackTrace();                     }                 }             }         });          // 读操作         executor.execute(() -> {             StringBuilder value = new StringBuilder();             int i = 0;             while (i < bufferData.length()) {                 try {                     semaphore2.tryAcquire(3, TimeUnit.SECONDS);                     System.out.println("get数据开始----------------");                     print(buffer);                      byte[] bytes = new byte[buffer.limit()];                     buffer.get(bytes);                     value.append(new String(bytes));                      System.out.println("get数据结束----------------");                     print(buffer);                     System.out.println("\n");                      i += bytes.length;                 } catch (Exception e) {                     e.printStackTrace();                     break;                 } finally {                     semaphore1.release();                 }             }              // 完整读取到的buffer数据             System.out.println("完整读取到的buffer数据：" + value.toString());             buffer.clear();             print(buffer);         });          executor.shutdown();     }      private static void print(Buffer buffer) {         System.out.println("position=" + buffer.position());         System.out.println("limit   =" + buffer.limit());         System.out.println("capacity=" + buffer.capacity());         System.out.println("mark    ：" + buffer.mark());     }</code></pre> <p>日志太长，就不全截图了，如下为最终输出：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8575d76cd9ad446eaa43e0653dc14b9f.jpg" alt="Java-NIO之Buffer（缓冲区）"></p> <p>以上代码模拟了写线程需要往 buffer 中分段写入 ‘hello word’，而读线程则需要从 buffer 中分段读取，并输出最终的数据。</p> <hr/> <p><b><font color="red">个人思考：</font></b><br /><u>从这也联想到了ftp传输数据时也是分段、按序进行传输的，也不是一次性将数据一股脑全部丢过去的，这应该就是 Buffer（缓冲区）的作用吧。</u></p> <h1 id="4buffer-缓冲区类型">4：Buffer 缓冲区类型</h1> <h2 id="41非直接缓冲区">4.1：非直接缓冲区</h2> <p><u><b><font color="red">缓冲区空间由JVM内存进行分配。</font></b></u></p> <p>非直接缓冲区属于常规操作，传统的 IO 流和 allocate() 方法分配的缓冲区都是非直接缓冲区，建立在 JVM 内存中。</p> <pre><code class="language-java">    public static ByteBuffer allocate(int capacity) {         if (capacity < 0)             throw new IllegalArgumentException();         return new HeapByteBuffer(capacity, capacity);     }</code></pre> <p>这种常规的非直接缓冲区会将内核地址空间中的内容拷贝到用户地址空间（中间缓冲区）后再由程序进行读或写操作，换句话说，磁盘上的文件在与应用程序交互的过程中会在两个缓存中来回进行复制拷贝。<br /> 如图：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/fbcd6d809fcd1df4ef1f9919452854e0.jpg" alt="Java-NIO之Buffer（缓冲区）"></p> <h2 id="42直接缓冲区">4.2：直接缓冲区</h2> <p><u><b><font color="red">缓冲区空间由物理内存直接分配。</font></b></u></p> <p>直接缓冲区绝大多数情况用于显著提升性能，缓冲区直接建立在物理内存（相对于JVM 的内存空间）中，省去了在两个存储空间中来回复制的操作，可以通过调用 ByteBuffer 的 allocateDirect() 工厂方法来创建。</p> <pre><code class="language-java">    public static ByteBuffer allocateDirect(int capacity) {         return new DirectByteBuffer(capacity);     }</code></pre> <p>直接缓冲区中的内容可以驻留在常规的垃圾回收堆之外，因此它们对应用程序的内存需求量造成的影响可能并不明显。<br /> 另外，直接缓冲区还可以通过 FileChannel 的 map() 方法将文件直接映射到内存中来创建，<br /> 该方法将返回 MappedByteBuffer（DirectByteBuffer extends MappedByteBuffer）。<br /> 直接或非直接缓冲区只针对字节缓冲区而言。字节缓冲区是那种类型可以通过 isDirect() 方法来判断。</p> <p>如图：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7c3ae0a675e3069757ded0d6fccc2a5c.jpg" alt="Java-NIO之Buffer（缓冲区）"></p> <hr/> <p><b><font color="red" size="5">map 和 read 的区别：</font></b><br /> 1：map 不会进行数据拷贝，会在物理内存开辟一块文件映射区域，只占用物理内存。</p> <pre><code class="language-java">ByteBuffer buffer = inChannel.map(FileChannel.MapMode.READ_ONLY, 0, file.length());</code></pre> <p>2：read 会进行数据拷贝，会占用用户内存空间。</p> <pre><code class="language-java">            ByteBuffer buffer = ByteBuffer.allocate(8);             // read 会进行数据拷贝，会占用用户内存空间。             inChannel.read(buffer);</code></pre> <h2 id="43问答区域">4.3：问答区域</h2> <p><b><font color="red">1：DirectByteBuffer 比 HeapByteBuffer 更快吗？</font></b></p> <p>不是。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a728038b2a009ab79bd6dd314c97c8fe.jpg" alt="Java-NIO之Buffer（缓冲区）"></p> <p><strong>本文参考文章：</strong><br /> 1：面试官：Java NIO 的 Buffer 缓冲区，你了解多少？<br /> 2：Java NIO direct buffer的优势在哪儿？<br /> 3：基于NIO的Socket通信(使用Java NIO的综合示例讲解)</p> 			                    </div>

                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-4266.htm">Qt程序打包发布，含第三方库，详细教程。</a></p>
                                                <p>下一个：<a href="/html/category/article-4268.htm">centos7 64位下mysql5.7的安装配置卸载</a></p>
                                            </div>

                    
                </div>
                <div class="col-md-3">
                    


<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-10184.htm" title="小动物打疫苗的流程视频（动物打预防针）">小动物打疫苗的流程视频（动物打预防针）</a></li>
                        <li class="py-2"><a href="/html/category/article-9586.htm" title="动物救援中心（动物救援中心电话是多少）">动物救援中心（动物救援中心电话是多少）</a></li>
                        <li class="py-2"><a href="/html/category/article-10092.htm" title="十大品牌墙布排名前十名（品牌墙布排行榜前十名有哪些）">十大品牌墙布排名前十名（品牌墙布排行榜前十名有哪些）</a></li>
                        <li class="py-2"><a href="/html/category/article-9448.htm" title="宠物寄养规则（宠物寄养规则有哪些）">宠物寄养规则（宠物寄养规则有哪些）</a></li>
                        <li class="py-2"><a href="/html/category/article-10553.htm" title="一件代发48个货源网站质量很好是真的吗（一件代发的货源网站有哪些）">一件代发48个货源网站质量很好是真的吗（一件代发的货源网站有哪些）</a></li>
                        <li class="py-2"><a href="/html/category/article-9402.htm" title="太阳宫宠物友好（太阳宫附近有什么）">太阳宫宠物友好（太阳宫附近有什么）</a></li>
                        <li class="py-2"><a href="/html/category/article-10461.htm" title="南京领养宠物的地方（南京哪里领养宠物）">南京领养宠物的地方（南京哪里领养宠物）</a></li>
                        <li class="py-2"><a href="/html/category/article-9909.htm" title="哪种猫粮比较好又不贵幼猫能吃（什么幼猫粮性价比高）">哪种猫粮比较好又不贵幼猫能吃（什么幼猫粮性价比高）</a></li>
                        <li class="py-2"><a href="/html/category/article-9356.htm" title="人工被动免疫接种的物质为（人工被动免疫注射的是）">人工被动免疫接种的物质为（人工被动免疫注射的是）</a></li>
                        <li class="py-2"><a href="/html/category/article-9725.htm" title="动物疫苗行业的现状及未来的发展 动物疫苗行业的现状及未来的发展趋势">动物疫苗行业的现状及未来的发展 动物疫苗行业的现状及未来的发展趋势</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
        <div class="site-footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <p>
                        Ireland Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <script src="/assets/website/js/frontend/irelandaddress/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/irelandaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/irelandaddress/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/irelandaddress/aos.js"></script>
    <script src="/assets/website/js/frontend/irelandaddress/navbar.js"></script>
    <script src="/assets/website/js/frontend/irelandaddress/counter.js"></script>
    <script src="/assets/website/js/frontend/irelandaddress/custom.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
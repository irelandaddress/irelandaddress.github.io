<!doctype html>
<html lang="zh-CN">

<head>
        <!-- Required meta tags -->
    <link rel="canonical" href="https://irelandaddress.github.io/html/category/article-4210.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/website/img/irelandaddress/favicon.ico" type="image/x-icon"/>
    <title>SpringBoot 上传/返回图片与Base64转换 - Ireland Address</title>
        <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;700&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/fonts/irelandaddress/icomoon/style.css">
    <link rel="stylesheet" href="/assets/website/fonts/irelandaddress/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/irelandaddress/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/irelandaddress/tiny-slider.css">
    <link rel="stylesheet" href="/assets/website/css/irelandaddress/aos.css">
    <link rel="stylesheet" href="/assets/website/css/irelandaddress/style.css">
    <link rel="stylesheet" href="/assets/website/css/style.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?638cd9f716f7b41384d0241d34bf2f4c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <div class="site-mobile-menu site-navbar-target">
        <div class="site-mobile-menu-header">
            <div class="site-mobile-menu-close">
                <span class="icofont-close js-menu-toggle"></span>
            </div>
        </div>
        <div class="site-mobile-menu-body"></div>
    </div>
    <nav class="site-nav mt-3">
        <div class="container">
            <div class="site-navigation">
                                <a href="/" class="logo m-0 mt-2 float-start">Ireland Address</a>
                                <ul class="js-clone-nav d-none d-lg-inline-block text-start site-menu float-end">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/html/category/">文章分类</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
                <a href="#" class="burger ml-auto float-right site-menu-toggle js-menu-toggle d-inline-block d-lg-none" data-toggle="collapse" data-target="#main-navbar">
                    <span></span>
                </a>
            </div>
        </div>
    </nav>
    <div class="hero-section body-page">
        <div class="container">
            <div class="row justify-content-between">
                <div class="col-lg-5">
                    <h2 class="heading mb-3" data-aos="fade-up" data-aos-delay="100">文章分类</h2>
                    <p class="mb-5" data-aos="fade-up" data-aos-delay="200">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                    </p>
                </div>
                <div class="col-lg-6">
                    <div class="img-wrap" data-aos="fade-left">
                        <img src="/assets/website/img/irelandaddress/hero_1.png" alt="Image" class="img-fluid">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="section section-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div data-aos="fade-up">
                        <h1 class="mb-5 text-center">SpringBoot 上传/返回图片与Base64转换</h1>
                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2>配置</h2> <p>默认情况下，在 spring boot 嵌入的 tomcat 限制了上传文件的大小，在 spring boot 的我官方文档中说明，每个文件的最大配置为<code>1Mb</code>，单次请求的总文件数不能大于<code>10Mb</code>。</p> <p>这意味着如果你上传的图片大于<code>1Mb</code>，会被拦截下来，无法正常保存到后台，并抛出一个错误，返回状态码：<code>500</code>。</p> <blockquote> <p>The field file exceeds its maximum permitted size of 1048576 bytes.</p> </blockquote> <p>需要根据实际情况更改这两个数值。(application.yml 配置文件)</p> <pre><code class="prism language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">servlet</span><span class="token punctuation">:</span><span class="token key atrule">multipart</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token key atrule">max-file-size</span><span class="token punctuation">:</span> 10MB<span class="token key atrule">max-request-size</span><span class="token punctuation">:</span> 100MB</code></pre> <h3>配置虚拟路径映射</h3> <p>后端程序接收到图片资源后，会将图片保存到硬盘中的一个路径下，如果我们想通过URL直接访问到图片资源，就需要配置一个虚拟路径去映射这个真实存在的物理路径。</p> <p>同样是在 application.yml 文件中，添加物理存储路径以及映射到项目中的虚拟路径。</p> <pre><code class="prism language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span><span class="token key atrule">save-path</span><span class="token punctuation">:</span> D<span class="token punctuation">:</span>/image<span class="token comment"># 图片存储路径</span><span class="token key atrule">mapper-path</span><span class="token punctuation">:</span> /static/image<span class="token comment"># 图片的映射路径</span></code></pre> <p>添加一个spring boot配置程序，这样就形成了一对映射关系。</p> <pre><code class="prism language-java"><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResourceHandlerRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">SpringbootConfigure</span><span class="token keyword">implements</span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">{<!-- --></span><span class="token comment">//@Value可以将配置文件的内容自动注入到属性内</span><span class="token comment">/***图标物理存储路径*/</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${image.save-path}"</span><span class="token punctuation">)</span><span class="token keyword">private</span><span class="token class-name">String</span> imageSavePath<span class="token punctuation">;</span><span class="token comment">/***图标映射路径*/</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${image.mapper-path}"</span><span class="token punctuation">)</span><span class="token keyword">private</span><span class="token class-name">String</span> imageMapperPath<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>imageMapperPath<span class="token operator">+</span><span class="token string">"**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"file:"</span><span class="token operator">+</span> imageSavePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2>ImageController</h2> <p>用于接收图片的<code>Controller</code></p> <pre><code class="prism language-java"><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileSystemResource</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>UUID<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/img"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">ImageController</span><span class="token punctuation">{<!-- --></span><span class="token comment">/*** 图片存储路径 */</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${image.save-path}"</span><span class="token punctuation">)</span><span class="token keyword">private</span><span class="token class-name">String</span> imageSavePath<span class="token punctuation">;</span><span class="token comment">/*** 图片映射路径 */</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${image.mapper-path}"</span><span class="token punctuation">)</span><span class="token keyword">private</span><span class="token class-name">String</span> imageMapperPath<span class="token punctuation">;</span><span class="token comment">/**      * 获取图片      *      * @param imagePath 图片在服务器中的路径      * @return 返回响应资源      */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{path}"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">Resource</span><span class="token punctuation">></span></span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token class-name">String</span> imagePath<span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">IOException</span><span class="token punctuation">{<!-- --></span><span class="token keyword">final</span><span class="token class-name">Path</span> path<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">File</span><span class="token punctuation">(</span>imagePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystemResource</span> resource<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token function">parseMediaType</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">probeContentType</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**      * 上传      *      * @param fileUpload 图片资源      * @return 图映射的虚拟访问路径      */</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token class-name">MultipartFile</span> fileUpload<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//获取文件名</span><span class="token class-name">String</span> fileName<span class="token operator">=</span> fileUpload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取文件后缀名。也可以在这里添加判断语句，规定特定格式的图片才能上传，否则拒绝保存。</span><span class="token class-name">String</span> suffixName<span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为了避免发生图片替换，这里使用了文件名重新生成</span>         fileName<span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> suffixName<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 将图片保存到文件夹里</span>             fileUpload<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token class-name">File</span><span class="token punctuation">(</span>imageSavePath<span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> imageMapperPath<span class="token operator">+</span> fileName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2>数据发送到后端需要注意的问题</h2> <p>要注意前端 post 提交<code>content-type</code> 的格式以及后端<code>@RequestBody</code> 注解的问题</p> <h3>@RequestBody注解</h3> <p><code>@RequestBody</code> 注解常用来处理<code>POST</code> 请求，并且<code>content-type</code> 不是默认的<code>application/x-www-form-urlcoded</code> 编码的内容，比如说：<code>application/json</code> 或者是<code>application/xml</code> 等。一般情况下来说常用其来处理<code>application/json</code> 类型。</p> <p><code>@RequestMapping</code>注解的方法的参数中包含了<code>@RequestBody</code>注解，那么 Spring 会首先查看请求中的<code>Content-Type</code>头部，然后根据<code>Content-Type</code>头部去查找合适的<code>HttpMessageConverter</code></p> <p><code>@RequestBody</code>用于需要触发<code>HttpMessageConverter</code>的场景：</p> <ul> <li>当HTTP请求的<code>Content-Type</code>头部为<code>application/json</code>时，需要加上<code>@RequestBody</code>注解，并使用默认的<code>HttpMessageConverter</code>或者自定义的<code>HttpMessageConverter</code>对请求的body中的json字符串转换为java对象。</li> <li>当<code>Content-Type</code>头部的值为<code>application/x-www-form-urlencoded</code>或者<code>multipart/form-data</code>时，表名此请求是一个常规的表单请求，不能使用<code>@RequestBody</code>注解。</li> </ul> <blockquote> <p>在《Spring 实战》中，表明了<code>@RequestBody</code>注解的含义和使用方式：用来解析请求体（可能是<code>POST</code>,<code>PUT</code>,<code>DELETE</code>,<code>GET</code>请求）中<code>Content-Type</code>为<code>application/json</code>类型的请求，利用消息转换器将其转换为对应的java对象（必须使用 VO 对象（VO：存储表单数据的实体类对象，详见类命名：Java 中 PO、VO、POJO、DTO、DAO、Service 包等常见包名的理解）去接收）</p> </blockquote> <p>那么什么类型的消息能够加上<code>@RequestBody</code>，什么类型的消息不能加呢？当请求中的<code>ContentType</code>分别为一下三种类型时的结果：</p> <table> <thead> <tr> <th align="left">是否加上注解</th> <th align="left">x-www-form-urlencoded</th> <th align="left">form-data</th> <th align="left">application/json</th> </tr> </thead> <tbody> <tr> <td align="left">不加<code>@RequestBody</code>注解</td> <td align="left">能接收</td> <td align="left">能接收</td> <td align="left">不能接收</td> </tr> <tr> <td align="left">加上<code>@RequestBody</code>注解</td> <td align="left">不能接收</td> <td align="left">不能接收</td> <td align="left">能接收</td> </tr> </tbody> </table> <blockquote> <p>延伸学习：常见的表单数据格式</p> </blockquote> <h2>图片转为 Base64 编码格式保存</h2> <p>一般建议很小的图片保存为 Base64 格式，或者页面中图片特别少且大小不是很大的情况下使用，因为转为 Base64 编码格式后将会明显占用更多空间。因为 Base64 的使用缺点，所以一般图片小于<code>10kb</code> 的时候，我们才会选择使用 Base64 图片，比如一些表情图片，太大的图片转换成 Base64 得不偿失。当然，极端情况极端考虑。</p> <p>Base64 编码的思想是是采用<code>64</code>个基本的 ASCII 码字符对数据进行重新编码。</p> <p>Base64 编码要求把<code>3</code>个<code>8</code>位字节（<code>3×8=24</code>）转化为<code>4</code>个<code>6</code>位的字节（<code>4×6=24</code>），之后在<code>6</code>位的前面补两个<code>0</code>，形成<code>8</code>位一个字节的形式。</p> <p>如果剩下的字符不足<code>3</code>个字节，则用<code>0</code>填充，输出字符使用’<code>=</code>‘，因此编码后输出的文本末尾可能会出现<code>1</code>或<code>2</code>个’<code>=</code>'。</p> <p>为了保证所输出的编码位可读字符，Base64 制定了一个编码表，以便进行统一转换。编码表的大小为<code>2^6=64</code>，这也是 Base64 名称的由来。</p> <blockquote> <p>注BASE64字符表：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code></p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220603/11a7fedf708feafce9cd3c592af29bbb.jpg" alt="SpringBoot 上传/返回图片与Base64转换"></p> <p>从以上编码规则可以得知，通过 Base64 编码，原来的<code>3</code>个字节编码后将成为<code>4</code> 个字节，即字节增加了 33.3%，数据量相应变大。所以<code>10M</code> 的数据通过 Base64 编码后大小大概为<code>10M*133.3%=13.33M</code>。</p> <h3>图片转换成base64格式的优缺点</h3> <ol> <li>优点</li> </ol> <p>（1）Base64 格式的图片是文本格式，占用<strong>内存</strong>小，转换后的大小比例大概为<code>1/3</code>，降低了资源服务器的消耗；</p> <p>（2）网页中使用 Base64 格式的图片时，不用再请求服务器调用图片资源，减少了服务器访问次数。</p> <ol start="2"> <li>缺点</li> </ol> <p>（1）base64格式的文本内容较多，存储在数据库中增大了数据库服务器的压力；（磁盘空间占用大）</p> <p>（2）网页加载图片虽然不用访问服务器了，但因为base64格式的内容太多，所以加载网页的速度会降低，可能会影响用户的体验。</p> <p>（3）Base64 无法缓存，要缓存只能缓存包含 Base64 的文件，比如 js 或者 css，这比直接缓存图片要差很多，而且一般 HTML 改动比较频繁，所以等同于得不到缓存效益。</p> <h3>Base64 转换图片工具类</h3> <p>其实也可以转换文件</p> <pre><code class="prism language-java"><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>binary<span class="token punctuation">.</span></span><span class="token class-name">Base64</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">ImageToBase64Util</span><span class="token punctuation">{<!-- --></span><span class="token comment">/***  本地文件(图片、excel等)转换成Base64字符串 */</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">String</span><span class="token function">convertFileToBase64</span><span class="token punctuation">(</span><span class="token class-name">String</span> imgPath<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//读取图片字节数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token class-name">InputStream</span> in<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>imgPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件大小(字节)="</span><span class="token operator">+</span> in<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             data<span class="token operator">=</span><span class="token keyword">new</span><span class="token keyword">byte</span><span class="token punctuation">[</span>in<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>             in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//对字节数组进行Base64编码，得到Base64编码的字符串</span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*** 将base64字符串，生成文件 */</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">File</span><span class="token function">convertBase64ToFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileBase64String<span class="token punctuation">,</span><span class="token class-name">String</span> filePath<span class="token punctuation">,</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">BufferedOutputStream</span> bos<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">FileOutputStream</span> fos<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token class-name">File</span> dir<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断文件目录是否存在</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&&</span> dir<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 dir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bfile<span class="token operator">=</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>fileBase64String<span class="token punctuation">)</span><span class="token punctuation">;</span>             file<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token operator">+</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>             fos<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>             bos<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>             bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bfile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> file<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>bos<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>                     bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e1<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>fos<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>                     fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e1<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*** MultipartFile转成InputStream 将图片转换成Base64编码 */</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">String</span><span class="token function">imgToBase64</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> uploadFiles<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">InputStream</span> in<span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//读取图片字节数组</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArr<span class="token operator">=</span> uploadFiles<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             in<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArr<span class="token punctuation">)</span><span class="token punctuation">;</span>             data<span class="token operator">=</span><span class="token keyword">new</span><span class="token keyword">byte</span><span class="token punctuation">[</span>in<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>             in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e1<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h2>参考</h2> <ul> <li> <p>Spring中的@RequestBody注解application/json与常规的HTTP方法的传值方式</p> </li> <li> <p>spring boot实现图片上传到后台的功能(浏览器可直接访问)</p> </li> <li> <p>Base64编码使数据量变大的原因详解</p> </li> <li> <p>Base64是文件变大</p> </li> <li> <p>建议小体积的图片转为base64</p> </li> <li> <p>将图片转换为base64_图片转换成base64格式的优缺点</p> </li> </ul> <ul> <li>如何编写返回图像的Spring Controller方法？</li> </ul> </div> 			                    </div>

                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-4209.htm">springboot全局时间格式化</a></p>
                                                <p>下一个：<a href="/html/category/article-4211.htm">Vue使用自定义指令实现拖拽行为</a></p>
                                            </div>

                    
                </div>
                <div class="col-md-3">
                    


<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-10276.htm" title="宠物猫疫苗都有哪些（宠物猫疫苗是什么疫苗）">宠物猫疫苗都有哪些（宠物猫疫苗是什么疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-9771.htm" title="动物疫苗厂家有哪些 动物疫苗厂家有哪些品牌">动物疫苗厂家有哪些 动物疫苗厂家有哪些品牌</a></li>
                        <li class="py-2"><a href="/html/category/article-10184.htm" title="小动物打疫苗的流程视频（动物打预防针）">小动物打疫苗的流程视频（动物打预防针）</a></li>
                        <li class="py-2"><a href="/html/category/article-9679.htm" title="延吉宠物医院电话 延吉宠物医院电话号码">延吉宠物医院电话 延吉宠物医院电话号码</a></li>
                        <li class="py-2"><a href="/html/category/article-10093.htm" title="动物疫苗经营范围有哪些要求和条件（动物疫苗销售需要什么手续）">动物疫苗经营范围有哪些要求和条件（动物疫苗销售需要什么手续）</a></li>
                        <li class="py-2"><a href="/html/category/article-10644.htm" title="动物防疫年度工作总结（2021年春季动物防疫工作总结）">动物防疫年度工作总结（2021年春季动物防疫工作总结）</a></li>
                        <li class="py-2"><a href="/html/category/article-10046.htm" title="泰安的宠物医院在什么地方（泰安夜市宠物医院）">泰安的宠物医院在什么地方（泰安夜市宠物医院）</a></li>
                        <li class="py-2"><a href="/html/category/article-9770.htm" title="维密食谱(维密的早餐品牌)">维密食谱(维密的早餐品牌)</a></li>
                        <li class="py-2"><a href="/html/category/article-9863.htm" title="最适合穷人养的宠物是什么（穷人养什么狗）">最适合穷人养的宠物是什么（穷人养什么狗）</a></li>
                        <li class="py-2"><a href="/html/category/article-9862.htm" title="妙三多疫苗间隔多少天（妙三多最少间隔多久打一针）">妙三多疫苗间隔多少天（妙三多最少间隔多久打一针）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">42</span> <a href="/html/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
        <div class="site-footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <p>
                        Ireland Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <script src="/assets/website/js/frontend/irelandaddress/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/irelandaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/irelandaddress/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/irelandaddress/aos.js"></script>
    <script src="/assets/website/js/frontend/irelandaddress/navbar.js"></script>
    <script src="/assets/website/js/frontend/irelandaddress/counter.js"></script>
    <script src="/assets/website/js/frontend/irelandaddress/custom.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>